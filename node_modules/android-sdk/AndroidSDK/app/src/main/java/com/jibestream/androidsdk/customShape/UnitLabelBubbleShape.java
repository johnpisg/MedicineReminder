package com.jibestream.androidsdk.customShape;

import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.RectF;
import android.text.Layout;
import android.text.StaticLayout;
import android.text.TextPaint;

import com.jibestream.jibestreamandroidlibrary.main.IBBox;
import com.jibestream.jibestreamandroidlibrary.math.Transform;
import com.jibestream.jibestreamandroidlibrary.math.Vec;
import com.jibestream.jibestreamandroidlibrary.shapes.IShapeTextBox;
import com.jibestream.jibestreamandroidlibrary.shapes.Shape;
import com.jibestream.jibestreamandroidlibrary.shapes.Text;
import com.jibestream.jibestreamandroidlibrary.shapes.TextFit;
import com.jibestream.jibestreamandroidlibrary.utils.MatrixUtils;

/**
 * Created by emmanuel on 15-05-22.
 */
public class UnitLabelBubbleShape extends Shape implements IShapeTextBox {
protected static final String TAG = "UnitLabelBubbleShape";
private static final int PADDING_VALUE = 8;
private static final int TRIG_SIZE = 8;
public float area;
private Paint paintTxt;
private RectF bounds;
private float width;
private float height;
private Path trigPath = new Path();
private float textOffsetY;
private StaticLayout staticLayout;
private String textString = "Label Name";

public UnitLabelBubbleShape() {
  this(100f, 100f);
}

public UnitLabelBubbleShape(float width, float height) {
  super();
  this.width = width;
  this.height = height;

  paintTxt = new Paint();
  paintTxt.setStyle(Paint.Style.FILL);
  paintTxt.setColor(Color.WHITE);
  paintTxt.setTextAlign(Paint.Align.CENTER);
  paintTxt.setTextSize(12);

  init();
}

private void init() {
  bounds = new RectF();

  TextPaint textPaint = new TextPaint(paintTxt);
  staticLayout = new StaticLayout(textString, textPaint, 80, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, true);


  float halfW = staticLayout.getWidth() * 0.5f;
  bounds.set(
      -halfW - PADDING_VALUE,
      -staticLayout.getHeight() - PADDING_VALUE * 2f - TRIG_SIZE,
      halfW + PADDING_VALUE,
      -TRIG_SIZE
  );

  textOffsetY = -staticLayout.getHeight() - PADDING_VALUE - TRIG_SIZE;

  area = width * height;

  trigPath.moveTo(-TRIG_SIZE, -TRIG_SIZE);
  trigPath.lineTo(TRIG_SIZE, -TRIG_SIZE);
  trigPath.lineTo(0, 0);
  trigPath.close();

  setBBox(bounds);
}

public float getHeight() {
  return height;
}

public void setHeight(float height) {
  this.height = height;
  init();
}

public float getWidth() {
  return width;
}

public void setWidth(float width) {
  this.width = width;
  init();
}

@Override
public void setTextString(String text) {
  textString = text;
  init();
}

@Override
public String getTextString() {
  return textString;
}


@Override
public void onDraw(Canvas canvas, Paint paint) {
  canvas.drawPath(trigPath, paint);
  canvas.drawRoundRect(bounds, 5f, 5f, paint);
  canvas.save();
  canvas.translate(0, textOffsetY);
  staticLayout.draw(canvas);
  canvas.restore();
}
}
