package com.jibestream.androidsdk;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.IBinder;
import android.support.v4.content.LocalBroadcastManager;
import android.widget.Toast;

import com.jibestream.jibestreamandroidlibrary.http.BasicAuthentication;
import com.jibestream.jibestreamandroidlibrary.intentFilters.IntentFilterEngine;
import com.jibestream.jibestreamandroidlibrary.main.M;
import com.jibestream.jibestreamandroidlibrary.main.VenueDataService;

public class VenueDataActivity extends Activity {
public static final String URL = "url";
public static final String PROJECTID = "projectId";
public static final String BASICAUTHENTICATION = "basicAuthentication";
private Context context;
boolean isBound = false;
public MService.MBinder binder;
public ServiceConnection serviceConnection = new ServiceConnection() {
  @Override
  public void onServiceConnected(ComponentName name, IBinder service) {
    binder = (MService.MBinder) service;
    isBound = true;
  }

  @Override
  public void onServiceDisconnected(ComponentName name) {
    isBound = false;
  }
};

public static Intent getIntent(Context context, String url, int projectId, BasicAuthentication basicAuthentication) {
  Intent intent = new Intent(context, VenueDataActivity.class);
  intent.putExtra(VenueDataActivity.URL, url);
  intent.putExtra(VenueDataActivity.PROJECTID, projectId);
  intent.putExtra(VenueDataActivity.BASICAUTHENTICATION, basicAuthentication);
  return intent;
}

@Override
protected void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  context = this;
  setContentView(R.layout.layout_loading);

  Intent intent = getIntent();
  String url = intent.getStringExtra(URL);
  int projectId = intent.getIntExtra(PROJECTID, -1);
  BasicAuthentication basicAuthentication = intent.getParcelableExtra(BASICAUTHENTICATION);

  LocalBroadcastManager.getInstance(this).registerReceiver(broadcastReceiverVenueDataService, new IntentFilter(VenueDataService.DONE));
  LocalBroadcastManager.getInstance(this).registerReceiver(broadcastReceiverVenueDataService, new IntentFilter(VenueDataService.ERROR));
  VenueDataService.getData(this, url, projectId, basicAuthentication);

  bindService(new Intent(this, MService.class), serviceConnection, Context.BIND_IMPORTANT);
}

@Override
protected void onDestroy() {
  super.onDestroy();
  unbindService(serviceConnection);
}
private BroadcastReceiver broadcastReceiverVenueDataService = new BroadcastReceiver() {
  @Override
  public void onReceive(Context context, Intent intent) {
    LocalBroadcastManager.getInstance(context).unregisterReceiver(broadcastReceiverVenueDataService);
    String action = intent.getAction();
    switch (action) {
      case VenueDataService.DONE:
        String filename = intent.getStringExtra(VenueDataService.KEY_FILENAME);
        //
        M m = binder.getM();
        LocalBroadcastManager.getInstance(context).registerReceiver(broadcastReceiverFrameworkInit, new IntentFilterEngine(m, IntentFilterEngine.COMPLETE));
        LocalBroadcastManager.getInstance(context).registerReceiver(broadcastReceiverFrameworkInit, new IntentFilterEngine(m, IntentFilterEngine.RESUME));
        m.start(filename, R.raw.config);
        //
        break;
      case VenueDataService.ERROR:
        Toast.makeText(context, "cant start Venue data... ", Toast.LENGTH_LONG).show();
        Intent intentError = new Intent(context, NoInternetNoCacheActivity.class);
        startActivity(intentError);
        break;
    }
  }
};

@Override
public void onBackPressed() {

}

private BroadcastReceiver broadcastReceiverFrameworkInit = new BroadcastReceiver() {
  @Override
  public void onReceive(Context context, Intent intent) {
    LocalBroadcastManager.getInstance(context).unregisterReceiver(broadcastReceiverFrameworkInit);
    startActivity(new Intent(context, LiveMapWithStaticMapActivity.class));
  }
};
}
