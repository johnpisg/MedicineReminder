package com.jibestream.androidsdk.customElements;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.RectF;

import com.jibestream.jibestreamandroidlibrary.elements.ElementHUD;
import com.jibestream.jibestreamandroidlibrary.main.Camera;
import com.jibestream.jibestreamandroidlibrary.main.M;
import com.jibestream.jibestreamandroidlibrary.shapes.Polygon;
import com.jibestream.jibestreamandroidlibrary.utils.ColorsMaterialDesign;

/**
 * Created by emmanuel on 2015-11-19.
 */
public class MiniMapDebug extends ElementHUD {

private final RectF map = new RectF();
private final Paint paintMap = new Paint();
private final Paint paintCam = new Paint();
private final Paint paintAlloed = new Paint();
private final Paint debugPaint = new Paint();

private M model;
private final Polygon polygonFOV = new Polygon();
private final Polygon polygonMap = new Polygon();
private RectF camStatic = new RectF();
private RectF camBBox = new RectF();
private RectF camAlloewdBBox = new RectF();
private final float[] localFOVPoints = new float[8];
private final float[] mapPoints = new float[8];
private final float[] normals = new float[8];
public float x;
public float y;
private volatile Camera camera;
public float[] lastPivot;

public MiniMapDebug() {
  setInViewSpace(true);
  paintCam.setColor(ColorsMaterialDesign.REDJS);
  paintCam.setStyle(Paint.Style.STROKE);
  paintCam.setStrokeWidth(3);

  paintMap.setColor(ColorsMaterialDesign.AMBER9);
  paintMap.setStyle(Paint.Style.STROKE);
  paintMap.setStrokeWidth(1);
//  paintMap.setAlpha(60);

  paintAlloed.setColor(ColorsMaterialDesign.LIME6);
  paintAlloed.setStyle(Paint.Style.STROKE);
  paintAlloed.setStrokeWidth(1);

  debugPaint.setColor(ColorsMaterialDesign.AMBER4);
  debugPaint.setTextSize(30);
}

@Override
public void onCreate(Context context, M m, long timeElapsed, long timeTotal, Camera camera) {
  super.onCreate(context, m, timeElapsed, timeTotal, camera);
  model = m;
}

@Override
public void onUpdate(M m, long timeElapsed, long timeTotal, int fps, Camera camera) {
  this.camera = camera;
  float perc = 0.025f;
  RectF mapViewbox = model.floorViewboxes[model.getCurrentMapIndex()];
  map.set(mapViewbox);
  map.set(
      mapViewbox.left * perc,
      mapViewbox.top * perc,
      mapViewbox.right * perc,
      mapViewbox.bottom * perc
  );
  mapPoints[0] = mapViewbox.left;
  mapPoints[1] = mapViewbox.top;
  mapPoints[2] = mapViewbox.right;
  mapPoints[3] = mapViewbox.top;
  mapPoints[4] = mapViewbox.right;
  mapPoints[5] = mapViewbox.bottom;
  mapPoints[6] = mapViewbox.left;
  mapPoints[7] = mapViewbox.bottom;
  camera.getMatrix().mapPoints(mapPoints);
  for (int i = 0; i < 8; i++) {
    mapPoints[i] *= perc;
  }
  polygonMap.setPathFromPoints(mapPoints);

  float[] fieldOfView = camera.getFieldOfView();
  localFOVPoints[0] = fieldOfView[0] * perc;
  localFOVPoints[1] = fieldOfView[1] * perc;
  localFOVPoints[2] = fieldOfView[2] * perc;
  localFOVPoints[3] = fieldOfView[3] * perc;
  localFOVPoints[4] = fieldOfView[4] * perc;
  localFOVPoints[5] = fieldOfView[5] * perc;
  localFOVPoints[6] = fieldOfView[6] * perc;
  localFOVPoints[7] = fieldOfView[7] * perc;
  polygonFOV.setPathFromPoints(localFOVPoints);

  Rect viewport = camera.getViewport();
  camStatic.set(
      viewport.left * perc,
      viewport.top * perc,
      viewport.right * perc,
      viewport.bottom * perc
  );

  camBBox.set(
      camera.getFieldOfViewBBox().left * perc,
      camera.getFieldOfViewBBox().top * perc,
      camera.getFieldOfViewBBox().right * perc,
      camera.getFieldOfViewBBox().bottom * perc
  );

  RectF availableCamRegion = camera.getAvailableCamRegion();
  camAlloewdBBox.set(
      availableCamRegion.left * perc,
      availableCamRegion.top * perc,
      availableCamRegion.right * perc,
      availableCamRegion.bottom * perc
  );

  x = camera.getX() * perc;
  y = camera.getY() * perc;

  lastPivot = camera.screenToGlobal(camera.lastPivotX, camera.lastPivotY);
  lastPivot[0] *= perc;
  lastPivot[1] *= perc;


  normals[0] = camera.normals[0];
  normals[1] = camera.normals[1];
  normals[2] = camera.normals[2];
  normals[3] = camera.normals[3];
}

@Override
public void onRender(Canvas canvas, Paint touchPaint) {
  if (this.camera == null) return;
  canvas.save();
  canvas.translate(90, 200);

  canvas.drawText("x: " + this.camera.getX(), 0, 200, debugPaint);
  canvas.drawText("y: " + this.camera.getY(), 0, 250, debugPaint);
  canvas.drawText("r: " + this.camera.getRoll(), 0, 300, debugPaint);
  canvas.drawRect(map, paintMap);
  canvas.drawRect(camStatic, paintCam);
  canvas.drawRect(camBBox, paintCam);
  canvas.drawRect(camAlloewdBBox, paintAlloed);
  canvas.drawRect(x - 5, y - 5, x + 5, y + 5, debugPaint);
  polygonFOV.onDraw(canvas, paintCam);
  polygonMap.onDraw(canvas, paintMap);

  canvas.drawCircle(lastPivot[0], lastPivot[1], 4, paintAlloed);
  //
  final float camX = camBBox.centerX();
  final float camY = camBBox.centerY();
  canvas.drawLine(
      camX,
      camY,
      normals[0] + camX,
      normals[1] + camY,
      paintCam
  );
  canvas.drawLine(
      camX,
      camY,
      normals[2] + camX,
      normals[3] + camY,
      paintAlloed
  );
  canvas.restore();
}
}