package com.jibestream.androidsdk.customElements;

import android.animation.ValueAnimator;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.RectF;
import android.support.v4.content.LocalBroadcastManager;
import android.view.animation.AccelerateDecelerateInterpolator;

import com.jibestream.jibestreamandroidlibrary.elements.ElementHUD;
import com.jibestream.jibestreamandroidlibrary.intentFilters.IntentFilterTouch;
import com.jibestream.jibestreamandroidlibrary.intents.IntentTouch;
import com.jibestream.jibestreamandroidlibrary.main.Camera;
import com.jibestream.jibestreamandroidlibrary.main.M;
import com.jibestream.jibestreamandroidlibrary.shapes.Polygon;
import com.jibestream.jibestreamandroidlibrary.shapes.Rectangle;
import com.jibestream.jibestreamandroidlibrary.styles.RenderStyle;
import com.jibestream.jibestreamandroidlibrary.utils.ColorsMaterialDesign;

/**
 * Created by emmanuel on 2015-11-19.
 */
public class MiniMap extends ElementHUD {

private final Paint paintRedFill = new Paint();
private final Paint paintRedStroke = new Paint();
private final Paint paintWhiteFill = new Paint();
public final Rectangle rectangle;
private final Polygon polygonFOV = new Polygon();
private final float[] localFOVPoints = new float[8];
public final float size = 100f;
public float perc = size / 5500f;
private M m;
private Camera camera;
private RectF defaultFraming = new RectF();
public RectF[] defaultFramings;
private ValueAnimator valueAnimator;

public MiniMap() {

  setInViewSpace(true);
  setSelectable(true);

  rectangle = new Rectangle(0, 0, 5500f * perc, 5500f * perc);
  setShape(rectangle);

  RenderStyle style = new RenderStyle(Paint.Style.FILL);
  style.paintFill.setColor(Color.WHITE);
  style.paintFill.setAlpha(60);
  setStyleIdle(style);

  paintRedStroke.setColor(ColorsMaterialDesign.REDJS);
  paintRedStroke.setStyle(Paint.Style.STROKE);
  paintRedStroke.setStrokeWidth(3);
  paintRedStroke.setAntiAlias(true);

  paintWhiteFill.setColor(ColorsMaterialDesign.GREY4);
  paintWhiteFill.setStyle(Paint.Style.FILL);

  paintRedFill.setColor(ColorsMaterialDesign.REDJS);
  paintRedFill.setStyle(Paint.Style.FILL);
  paintRedFill.setAntiAlias(true);

  valueAnimator = new ValueAnimator();
  valueAnimator.setDuration(999);
  valueAnimator.setFloatValues(1f, 0);
  valueAnimator.setInterpolator(new AccelerateDecelerateInterpolator());
  valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
    @Override
    public void onAnimationUpdate(ValueAnimator animation) {
      float v = (float) animation.getAnimatedValue();
      m.camera.setRoll(m.camera.getRoll() * v);
      m.camera.setScale(m.camera.getScale() * v + (1f - v) * 1f);
      m.camera.setTranslation(
          m.camera.getX() * v + (1f - v) * m.defaultFramings[m.getCurrentMapIndex()].centerX(),
          m.camera.getY() * v + (1f - v) * m.defaultFramings[m.getCurrentMapIndex()].centerY()
      );
    }
  });
}

@Override
public void onCreate(Context context, M m, long timeElapsed, long timeTotal, Camera camera) {
  super.onCreate(context, m, timeElapsed, timeTotal, camera);
  this.m = m;
  defaultFramings = m.defaultFramings;
  LocalBroadcastManager.getInstance(context).registerReceiver(broadcastReceiver, new IntentFilterTouch(m, IntentFilterTouch.TYPE_SINGLE));
}

@Override
public void onUpdate(M m, long timeElapsed, long timeTotal, int fps, Camera camera) {
  this.camera = camera;
  super.onUpdate(m, timeElapsed, timeTotal, fps, camera);

  RectF contentSize = camera.getContentSize();
  perc = size / contentSize.width();
  rectangle.set(
      contentSize.left * perc,
      contentSize.top * perc,
      contentSize.right * perc,
      contentSize.bottom * perc
  );

  int currentMapIndex = m.getCurrentMapIndex();
  defaultFraming.set(
      defaultFramings[currentMapIndex].left * perc,
      defaultFramings[currentMapIndex].top * perc,
      defaultFramings[currentMapIndex].right * perc,
      defaultFramings[currentMapIndex].bottom * perc
  );

  float alpha = m.camera.getScaleUnit();
  alpha *= 40f;
  alpha *= 254f;
  alpha = Math.min(alpha, 254);
  paintRedFill.setAlpha((int) alpha);

  float[] fieldOfView = camera.getFieldOfView();
  localFOVPoints[0] = fieldOfView[0] * perc;
  localFOVPoints[1] = fieldOfView[1] * perc;
  localFOVPoints[2] = fieldOfView[2] * perc;
  localFOVPoints[3] = fieldOfView[3] * perc;
  localFOVPoints[4] = fieldOfView[4] * perc;
  localFOVPoints[5] = fieldOfView[5] * perc;
  localFOVPoints[6] = fieldOfView[6] * perc;
  localFOVPoints[7] = fieldOfView[7] * perc;
  polygonFOV.setPathFromPoints(localFOVPoints);

  Rect viewport = camera.getViewport();
  getTransform().setTranslationX(viewport.centerX() - size / 2f);
  getTransform().setTranslationY(viewport.bottom - size - 20);
}

@Override
public void onRender(Canvas canvas, Paint touchPaint) {
  super.onRender(canvas, touchPaint);
  if (touchPaint != null) {
    return;
  }
  canvas.drawRect(defaultFraming, paintWhiteFill);
  polygonFOV.onDraw(canvas, paintRedFill);
  polygonFOV.onDraw(canvas, paintRedStroke);
}

@Override
public synchronized void onDestroy(Context context) {
  super.onDestroy(context);
  LocalBroadcastManager.getInstance(context).unregisterReceiver(broadcastReceiver);
}

private BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {
  @Override
  public void onReceive(Context context, Intent intent) {
    IntentTouch intentTouch = (IntentTouch) intent;
    if (intentTouch.id == id) {
      if (valueAnimator.isRunning()) valueAnimator.end();
      valueAnimator.start();
    }
  }
};
}