package com.jibestream.androidsdk.customElements;

import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.RectF;

import com.jibestream.jibestreamandroidlibrary.elements.UnitLabel;
import com.jibestream.jibestreamandroidlibrary.main.Camera;
import com.jibestream.jibestreamandroidlibrary.main.M;
import com.jibestream.jibestreamandroidlibrary.utils.ColorsMaterialDesign;

/**
 * Created by emmanuel on 2015-10-08.
 */
public class UnitLabelsSameSize extends UnitLabel {
private static final int STEP = 255 / 20;
private Rect bounds = new Rect();
private float textOffsetY;
private float textWidth;
private float textHeight;
private final Paint paint;
private volatile boolean show = false;

// TODO: 2016-03-23 fix the lack of Shape, so bbox code can be eliminated
public UnitLabelsSameSize() {
  setConstantScale(true);
  //
  paint = new Paint();
  paint.setStyle(Paint.Style.FILL);
  paint.setTextSize(25);
  paint.setTextAlign(Paint.Align.CENTER);
  paint.setColor(ColorsMaterialDesign.GREY9);
  calc();
}

@Override
public void setText(String s) {
  super.setText(s);
  calc();
}

private void calc() {
  final String text = getText();
  if (text == null) return;
  paint.getTextBounds(text, 0, text.length(), bounds);
  final RectF bBox = new RectF(bounds);
  bBox.offset(-bounds.centerX(), 0);
  textWidth = bounds.width();
  textHeight = bounds.height();
  textOffsetY = bounds.height() * 0.5f;
}

private boolean testDesiredVisibility(float cameraZoom) {
  float calculatedWidth = width * cameraZoom;
  float calculatedHeight = height * cameraZoom;
  if (calculatedWidth > textWidth && calculatedHeight > textHeight) {
    return false;
  } else {
    return true;
  }
}

@Override
public void onUpdate(M m, long timeElapsed, long timeTotal, int fps, Camera camera) {
  super.onUpdate(m, timeElapsed, timeTotal, fps, camera);
//  bbox.set(bounds);
//  transformation.mapRect(bbox);
//  bbox.offset(offsetX, offsetY);
  if (textString == null || textString.isEmpty()) {
    show = false;
    return;
  }
  if (testDesiredVisibility(camera.getZoom())) {
//    addAlpha(-STEP*3);
    show = false;
  } else {
//    addAlpha(STEP);
    show = true;
  }
}

private void addAlpha(int v) {
  v = paint.getAlpha() + v;
  if (v < 0) {
    paint.setAlpha(0);
  } else if (v > 255) {
    paint.setAlpha(255);
  } else {
    paint.setAlpha(v);
  }
  if (paint.getAlpha() > 0) {
    setVisible(true);
  } else {
    setVisible(false);
  }
}

@Override
public void onRender(Canvas canvas, Paint touchPaint) {
  if (!show) return;
  canvas.drawText(textString, 0, textOffsetY, paint);
  // LBoxes rendering
//  canvas.save();
//  final float rec = 1f/ MatrixUtils.getScaleX(getTransformation());
//  canvas.scale(rec,rec);
//  canvas.drawLines(lBoxLines, paintDebug);
//  canvas.restore();
}

}
