package com.jibestream.androidsdk;

import android.animation.ValueAnimator;
import android.app.ProgressDialog;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.ServiceConnection;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.RectF;
import android.os.Bundle;
import android.os.IBinder;
import android.support.v4.content.LocalBroadcastManager;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.SearchView;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.WindowManager;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.jibestream.jibestreamandroidlibrary.elements.Element;
import com.jibestream.jibestreamandroidlibrary.elements.ParkingLot;
import com.jibestream.jibestreamandroidlibrary.elements.Unit;
import com.jibestream.jibestreamandroidlibrary.http.BasicAuthentication;
import com.jibestream.jibestreamandroidlibrary.intentFilters.IntentFilterMap;
import com.jibestream.jibestreamandroidlibrary.intentFilters.IntentFilterTouch;
import com.jibestream.jibestreamandroidlibrary.intentFilters.IntentFilterWaypoint;
import com.jibestream.jibestreamandroidlibrary.intents.IntentWaypoint;
import com.jibestream.jibestreamandroidlibrary.main.EngineView;
import com.jibestream.jibestreamandroidlibrary.main.M;
import com.jibestream.jibestreamandroidlibrary.mapBuilderV3.astar.Point;
import com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.Amenity;
import com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.Category;
import com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.Destination;
import com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.MapFull;
import com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.Waypoint;
import com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.Zone;
import com.jibestream.jibestreamandroidlibrary.mapBuilderV3.textDirections.Helpers;
import com.jibestream.jibestreamandroidlibrary.mapBuilderV3.textDirections.TDInstruction;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;

public class LiveMapWithStaticMapActivity extends AppCompatActivity {
private static final String TAG = "LiveMapWithStaticMapActivity";
//private ToggleButton aToggleButton;
private Button framePathButton;
private Button frameMapButton;
private Button resetCameraButton;
//private Button frame40percentButton;
private Button showBlueDotButton;
private Button frameCustomButton;
private Button frameRandDestButton;
private Button frameRandomAmenity;
private Button leftButton;
private Button rightButton;
private Button zoomInButton;
private Button zoomOutButton;
private Button rotateButton;
private Button toClosestAmenityButton;
private Button highlightCategoryButton;
private Button highlightUnitButton;
private Button showTextDirectionsButton;
private Button imageButton;
private Button showZonesButton;
private TextView fromView;
private TextView toView;
private TextView levelView;
private TextView textDir;
private TextView debugView;
private ImageView mapImageView;
private ProgressDialog textDirections_spinner;
private String lastSearchQuery;
private ArrayList<Integer> selectedItems = new ArrayList();
private volatile M m;
protected Context context;
private EngineView engineView;
public ArrayList<ArrayList<TDInstruction>> textDirectionInstruction;
public TDInstruction[] textDirectionInstructions;
private int count = 0;
private int distance_calc;
private String distance;

//
public BroadcastReceiver broadcastReceiverMap = new BroadcastReceiver() {
  @Override
  public void onReceive(Context context, Intent intent) {

    MapFull currentMap = m.getCurrentMap();
    if (currentMap == null) return;
    final String s = currentMap.map.name;
    setTitle(s);
    runOnUiThread(new Runnable() {
      final TextView tv = levelView;

      @Override
      public void run() {
        tv.setText(s);
      }
    });
  }
};
private BroadcastReceiver broadcastReceiverWaypoint = new BroadcastReceiver() {
  //region onReceive
  @Override
  public void onReceive(Context context, Intent intent) {
    final IntentWaypoint waypointEvent = (IntentWaypoint) intent;
    final Destination[] destinationsFrom = m.getDestinationsOfWaypoint(waypointEvent.from);
    final Destination[] destinationsTo = m.getDestinationsOfWaypoint(waypointEvent.to);
    runOnUiThread(new Runnable() {
      @Override
      public void run() {
        if (destinationsFrom != null && destinationsFrom.length > 0 && destinationsFrom[0] != null) {
          fromView.setText(destinationsFrom[0].name);
        } else {
          com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.Amenity[] amenities =
              m.getAmenitiesOfWaypoint(m.getFromWaypoint());
          if (amenities != null && amenities.length > 0 && amenities[0] != null) {
            String display = amenities[0].bean.description;
            fromView.setText(display);
          } else {
            fromView.setText("please set..");
          }
        }
        if (destinationsTo != null && destinationsTo.length > 0 && destinationsTo[0] != null) {
          toView.setText(destinationsTo[0].name);
        } else {
          com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.Amenity[] amenities =
              m.getAmenitiesOfWaypoint(m.getToWaypoint());
          if (amenities != null && amenities.length > 0 && amenities[0] != null) {
            String display = amenities[0].bean.description;
            toView.setText(display);
          } else {
            toView.setText("please set..");
          }
        }
      }
    });
  }
  //endregion
};
//


boolean isBound = false;
private ServiceConnection serviceConnection = new ServiceConnection() {
  @Override
  public void onServiceConnected(ComponentName name, IBinder service) {
    Log.i(TAG, "onServiceConnected");
    MService.MBinder binder = (MService.MBinder) service;
    m = binder.getM();
    isBound = true;
    m.setEngineView(engineView);
    m.onResume();

    m.userLocation.setVisible(true);
//      m.userLocation.getTransform().setTranslationX(2000);
//      m.userLocation.getTransform().setTranslationY(3000);

    //
    LocalBroadcastManager localBroadcastManager = LocalBroadcastManager.getInstance(context);
    localBroadcastManager.registerReceiver(broadcastReceiverMap, new IntentFilterTouch(m, IntentFilterMap.ACTION));
    localBroadcastManager.registerReceiver(broadcastReceiverWaypoint, new IntentFilterTouch(m, IntentFilterWaypoint.ACTION));
  }

  @Override
  public void onServiceDisconnected(ComponentName name) {
    isBound = false;
    //
    m.onPause();
    LocalBroadcastManager localBroadcastManager = LocalBroadcastManager.getInstance(context);
    localBroadcastManager.unregisterReceiver(broadcastReceiverMap);
    localBroadcastManager.unregisterReceiver(broadcastReceiverWaypoint);
  }
};

@Override
protected void onCreate(Bundle savedInstanceState) {
//  StrictMode.setThreadPolicy(
//      new StrictMode.ThreadPolicy.Builder()
//          .detectAll()
//          .penaltyFlashScreen()
//          .penaltyLog()
//          .build()
//  );
//  StrictMode.setVmPolicy(
//      new StrictMode.VmPolicy.Builder()
//          .detectAll()
//          .penaltyLog()
//          .penaltyDeath()
//          .build()
//  );
  super.onCreate(savedInstanceState);
  //
  context = getApplicationContext();
  //
  //Remove notification bar
  this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
  //Keep screen on...
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  //Set activity content from layout resource
  setContentView(R.layout.activity_maplive_with_mapstatic);
  //
  engineView = (EngineView) findViewById(R.id.engineview);
  //
  bindService(new Intent(this, MService.class), serviceConnection, Context.BIND_AUTO_CREATE);
}

@Override
protected void onResume() {
  super.onResume();
  //
  if (m != null) m.onResume();
  //
  findViews();

  addButtonListeners();

//  final ValueAnimator valueAnimatorDblTap = new ValueAnimator().setDuration(333);
//  valueAnimatorDblTap.setFloatValues(1f, 0);
//  valueAnimatorDblTap.setInterpolator(new AccelerateDecelerateInterpolator());
//  valueAnimatorDblTap.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
//    @Override
//    public void onAnimationUpdate(ValueAnimator animation) {
//      float v = (float) animation.getAnimatedValue();
//      m.camera.setScale(m.camera.getScale() - m.camera.getScale() * 0.05f * v);
//    }
//  });
//  LocalBroadcastManager.getInstance(context).registerReceiver(new BroadcastReceiver() {
//    @Override
//    public void onReceive(Context context, Intent intent) {
//      MotionEvent motionEvent = intent.getParcelableExtra("motionEvent");
//      motionEventX = motionEvent.getX();
//      motionEventY = motionEvent.getY();
//      float[] glbs = m.camera.screenToGlobal(motionEventX, motionEventY);
//      m.camera.addTranslate(glbs[0] - m.camera.getX(), glbs[1] - m.camera.getY());
//
//      valueAnimatorDblTap.start();
//    }
//  }, new IntentFilter(EngineView.ON_DOUBLE_TAP));
}

@Override
protected void onPause() {
  super.onPause();
  //  final ViewGroup viewGroup = (ViewGroup) ((ViewGroup) this.findViewById(android.R.id.content)).getChildAt(0);
//  final int childCount = viewGroup.getChildCount();
//  for (int i = 0; i < childCount; i++) {
//    final View childAt = viewGroup.getChildAt(i);
//    if (childAt instanceof EngineView) {
//      EngineView engineView = (EngineView )childAt;
//      engineView.stopThreads();
//    }
//  }
  //
  if (m != null) m.onPause();
}

@Override
protected void onDestroy() {

//  if (m != null) m.onDestroy();
//  m = null;
//  if (mImage != null) mImage.onDestroy();
//  mImage = null;

  unbindService(serviceConnection);
  super.onDestroy();
}
//

private void findViews() {
  // Reference buttons
//  aToggleButton = (ToggleButton) findViewById(R.id.aToggleButton);
  frameMapButton = (Button) findViewById(R.id.frameMapButton);
  framePathButton = (Button) findViewById(R.id.framePathButton);
//  frame40percentButton = (Button) findViewById(R.id.frame40percentButton);
  frameCustomButton = (Button) findViewById(R.id.frameCustomButton);
  frameRandDestButton = (Button) findViewById(R.id.frameRandDestButton);
  frameRandomAmenity = (Button) findViewById(R.id.frameRandomAmenity);
  resetCameraButton = (Button) findViewById(R.id.resetCameraButton);
  zoomInButton = (Button) findViewById(R.id.zoomInButton);
  zoomOutButton = (Button) findViewById(R.id.zoomOutButton);
  rotateButton = (Button) findViewById(R.id.rotateButton);
  leftButton = (Button) findViewById(R.id.leftButton);
  rightButton = (Button) findViewById(R.id.rightButton);
  showTextDirectionsButton = (Button) findViewById(R.id.showTextDirectionsButton);
  toClosestAmenityButton = (Button) findViewById(R.id.toClosestAmenityButton);
  highlightCategoryButton = (Button) findViewById(R.id.highlightCategoryButton);
  highlightUnitButton = (Button) findViewById(R.id.highlightUnitButton);
  imageButton = (Button) findViewById(R.id.imageButton);
  showZonesButton = (Button) findViewById(R.id.showZonesButton);
  showBlueDotButton = (Button) findViewById(R.id.showBlueDot);
  levelView = (TextView) findViewById(R.id.levelView);
  debugView = (TextView) findViewById(R.id.debugView);
  fromView = (TextView) findViewById(R.id.fromView);
  toView = (TextView) findViewById(R.id.toView);
  mapImageView = (ImageView) findViewById(R.id.mapImageView);
  textDir = (TextView) findViewById(R.id.textDirection);
}

private void addButtonListeners() {
/*  aToggleButton.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
    @Override
    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
      if (isChecked) {
        // The toggle is enabled
      } else {
        // The toggle is disabled
      }
    }
  });*/
  final ValueAnimator valueAnimatorRotCam = new ValueAnimator().setDuration(333);
  valueAnimatorRotCam.setInterpolator(new AccelerateDecelerateInterpolator());
  valueAnimatorRotCam.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
    @Override
    public void onAnimationUpdate(ValueAnimator animation) {
      m.camera.setRoll((Float) animation.getAnimatedValue());
    }
  });
  rotateButton.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
      if (valueAnimatorRotCam.isRunning()) valueAnimatorRotCam.end();
      float roll = m.camera.getRoll();
      valueAnimatorRotCam.setFloatValues(roll, roll - 45);
      valueAnimatorRotCam.start();
//      m.camera.addRoll(-45);
    }
  });
  final ValueAnimator valueAnimatorCamZoomStep = new ValueAnimator().setDuration(222);
  valueAnimatorCamZoomStep.setInterpolator(new AccelerateDecelerateInterpolator());
  valueAnimatorCamZoomStep.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
    @Override
    public void onAnimationUpdate(ValueAnimator animation) {
      m.camera.setScale((Float) animation.getAnimatedValue());
    }
  });
  zoomInButton.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
      if (valueAnimatorCamZoomStep.isRunning()) valueAnimatorCamZoomStep.end();
      float scale = m.camera.getScale();
      valueAnimatorCamZoomStep.setFloatValues(scale, scale - scale * 0.5f);
      valueAnimatorCamZoomStep.start();
//      m.camera.zoomIn();
    }
  });

  zoomOutButton.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
      if (valueAnimatorCamZoomStep.isRunning()) valueAnimatorCamZoomStep.end();
      float scale = m.camera.getScale();
      valueAnimatorCamZoomStep.setFloatValues(scale, scale + scale * 0.5f);
      valueAnimatorCamZoomStep.start();
//      m.camera.zoomOut();
    }
  });
  frameMapButton.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
//      Toast.makeText(context, "zone type[0] = " + m.getArrayOfZoneTypes()[0].zoneTypeName, Toast.LENGTH_SHORT).show();
//      Toast.makeText(context, "zone type by id 32 = " + m.getZoneTypeById(32).zoneTypeName, Toast.LENGTH_SHORT).show();
//      Toast.makeText(context, "zone type by zone = " + m.getZoneTypeByZone(m.getZoneByID(425)), Toast.LENGTH_SHORT).show(); //TODO: check why this isn't working?
      m.camera.zoomOutMax();
    }
  });
  framePathButton.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
      m.cameraToPath();
    }
  });
  final ValueAnimator valueAnimator40 = new ValueAnimator().setDuration(667);
  valueAnimator40.setInterpolator(new AccelerateDecelerateInterpolator());
  valueAnimator40.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
    @Override
    public void onAnimationUpdate(ValueAnimator animation) {
      m.camera.framePerCent((Float) animation.getAnimatedValue());
    }
  });
/*  frame40percentButton.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
      float cent = m.camera.getScaleUnit() * 100f;
      float centTo = cent + 40f;
      centTo = Math.min(centTo, 100f);
      centTo = Math.max(centTo, 0.1f);
      valueAnimator40.setFloatValues(cent, centTo);
      valueAnimator40.start();
//      m.camera.framePerCent(40);
    }
  });*/
  frameCustomButton.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
      final RectF rectOfClassesInstances = m.getRectOfClassesInstances(new Class[]{ParkingLot.class}, m.getCurrentMapIndex());
      float sqrt = (float) Math.sqrt(rectOfClassesInstances.width() * rectOfClassesInstances.width() + rectOfClassesInstances.height() * rectOfClassesInstances.height());
      sqrt = sqrt * -0.5f;
//      sqrt = Math.max(rectOfClassesInstances.width(), rectOfClassesInstances.height())*-0.5f;
      RectF rectF = new RectF(
          rectOfClassesInstances.centerX(),
          rectOfClassesInstances.centerY(),
          rectOfClassesInstances.centerX(),
          rectOfClassesInstances.centerY()
      );
      rectF.inset(sqrt, sqrt);
      m.camera.zoomTo(rectF, 0);
    }
  });
  frameRandDestButton.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
      final Destination[] destinations = m.venueData.destinations;
      final double random = Math.random() * (destinations.length - 1f);
      final Destination destination = destinations[((int) random)];
      m.getElementsOfDestination(destination.id, new M.CallbackElements() {
        @Override
        public void callback(Element[] elements) {
          if (elements.length > 0) {
            final Element el = elements[0];
            m.setLevel(m.venueData.maps[el.getLevel()]);
//      el.setHighlightState(true);
//      final Bitmap bitmap = Bitmap.createBitmap(mapImageView.getWidth(), mapImageView.getHeight(), Bitmap.Config.ARGB_8888);
//      m.camera.setViewport(bitmap.getWidth(), bitmap.getHeight());
            m.camera.zoomTo(el.getBBox(), 10);
            final Bitmap bitmap = Bitmap.createBitmap(m.camera.getViewport().width(), m.camera.getViewport().height(), Bitmap.Config.ARGB_8888);
            Canvas canvas = new Canvas(bitmap);
//            final Camera camera = m.camera;
//            final float x = camera.getX();
//            final float y = camera.getY();
//            final float roll = camera.getRoll();
//            final float scale = camera.getScale();
            m.renderToCanvas(canvas, new M.RenderCallback() {
              @Override
              public void onRender() {
                runOnUiThread(new Runnable() {
                  @Override
                  public void run() {
                    mapImageView.setImageBitmap(bitmap);
//                    camera.setTranslation(x,y);
//                    camera.setRoll(roll);
//                    camera.setScale(scale);
                  }
                });
              }
            });
          }
        }
      });
    }
  });

  frameRandomAmenity.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
      final Amenity[] amenities = m.venueData.amenities;
      int random = (int) (Math.random() * (amenities.length - 1f));
      final Amenity amenity = amenities[random];
      final Waypoint[] waypointsOfAmenity = m.getWaypointsOfAmenity(amenity);
      random = (int) (Math.random() * (waypointsOfAmenity.length - 1f));
      final Waypoint waypoint = waypointsOfAmenity[random];
      final float x = (float) waypoint.x;
      final float y = (float) waypoint.y;
      final RectF region = new RectF(x, y, x, y);
      final int inflateAmount = -100;
      region.inset(inflateAmount, inflateAmount);
      m.camera.zoomTo(region);
    }
  });

  resetCameraButton.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
      m.camera.reset();
    }
  });
  rightButton.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
      if (valueAnimatorCamZoomStep.isRunning()) valueAnimatorCamZoomStep.end();
      float scale = m.camera.getScale();
      valueAnimatorCamZoomStep.setFloatValues(scale, scale * 0.95f, scale - scale * 0.05f, scale);
      valueAnimatorCamZoomStep.start();
      m.nextLevel();
    }
  });
  leftButton.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
      if (valueAnimatorCamZoomStep.isRunning()) valueAnimatorCamZoomStep.end();
      float scale = m.camera.getScale();
      valueAnimatorCamZoomStep.setFloatValues(scale, scale * 0.95f, scale - scale * 0.05f, scale);
      valueAnimatorCamZoomStep.start();
      m.prevLevel();
    }
  });
  toClosestAmenityButton.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
      showAmenitiesDialog(findClosestAmenity);
    }
  });
  highlightCategoryButton.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
      showCategoryDialog();
    }
  });
  highlightUnitButton.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
      showDestinationsDialog(highlightDestination);
    }
  });
  showTextDirectionsButton.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
      showTextDirections();
    }
  });
  imageButton.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
      final Bitmap bitmap = Bitmap.createBitmap((int) m.camera.getViewport().width(), (int) m.camera.getViewport().height(), Bitmap.Config.ARGB_8888);
      Canvas canvas = new Canvas(bitmap);
      m.renderToCanvas(canvas, new M.RenderCallback() {
        @Override
        public void onRender() {
          runOnUiThread(new Runnable() {
            @Override
            public void run() {
              mapImageView.setImageBitmap(bitmap);
            }
          });
        }
      });
    }
  });
  showZonesButton.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
      showZonesDialog();
    }
  });
  showBlueDotButton.setOnClickListener(new View.OnClickListener() {
    @Override
    public void onClick(View v) {
      updateBlueDot();
    }
  });
}

private void updateBlueDot() {
  Helpers helpers = new Helpers();
  Point new_point = new Point(m.userLocation.getTransform().getTranslationX(), m.userLocation.getTransform().getTranslationY(), 0f);
//  if (m.getPathForCurrentFloor() != null) {
//    new_point = helpers.correctPathUsingWayfindPath(m.getPathForCurrentFloor(), new_point, 50);
//    m.userLocation.getTransform().setTranslationX((float) new_point.x);
//    m.userLocation.getTransform().setTranslationY((float) new_point.y);
//
//    float current_orientation = m.userLocation.getTransform().getRotation();
//    m.camera.reset();
//    m.camera.setRoll(current_orientation);
//  } else {
//    ArrayList<Waypoint> waypointsOnFloor = new ArrayList<>();
//    for (int i = 0; i < m.venueData.waypoints.length; i++) {
//      if (m.venueData.waypoints[i].mapId == m.getCurrentMap().map.mapId) {
//        waypointsOnFloor.add(m.venueData.waypoints[i]);
//      }
//    }
//
//    new_point = helpers.correctPointUsingPaths(m.venueData.paths, waypointsOnFloor.toArray(new Waypoint[waypointsOnFloor.size()]), m.getCurrentMap().map.mapId, new_point, 40);
//    m.userLocation.getTransform().setTranslationX((float) new_point.x);
//    m.userLocation.getTransform().setTranslationY((float) new_point.y);
//
//    float current_orientation = m.userLocation.getTransform().getRotation();
//    m.camera.reset();
//    m.camera.setRoll(current_orientation);
//  }

  testData("http://akshay-pc:8000/YAHI-Android.csv");
//    ArrayList<Waypoint> waypointsOnFloor = new ArrayList<>();
//    for (int i = 0; i < m.venueData.waypoints.length; i++) {
//        if (m.venueData.waypoints[i].mapId == m.getCurrentMap().map.mapId) {
//            waypointsOnFloor.add(m.venueData.waypoints[i]);
//        }
//    }
//    new_point = helpers.correctPointUsingPaths(m.venueData.paths, waypointsOnFloor.toArray(new Waypoint[waypointsOnFloor.size()]), m.getCurrentMap().map.mapId, new_point, 40);
//    m.userLocation.setMoveTo((float)new_point.x,(float)new_point.y);
//
//    if (m.getPathForCurrentFloor() != null){
//        Boolean rerouter = helpers.shouldCorrectToRerouteWayfindPath(m.getPathForCurrentFloor(),new_point,100,m.camera.getMapWidthScreenSpace());
//        if (rerouter){
//            m.setFromWaypoint(m.findClosestWaypoint(m.userLocation.getTransform().getTranslationX(),m.userLocation.getTransform().getTranslationY(),m.getCurrentMap()));
//        }
//    }
}

private void testData(final String url) {
  new Thread(new Runnable() {
    @Override
    public void run() {
//                Long time_passed = System.currentTimeMillis();
//                Log.d(TAG,"Start: " + String.valueOf(time_passed));
      URL stockURL = null;
      int counter = 0;
      float last_location_x = -1;
      float last_location_y = -1;
      float current_location_x = -1;
      float current_location_y = -1;
      float heading = -1;
      float transistion_speed = -1;
      float outer_alpha = -1;
      float inner_start_alpha = -1;
      float pulse_speed = -1;
      float pulse_wait = -1;
      float confidence = -1;
      float scale = -1;
      InputStream is = null;
      try {
        stockURL = new URL(url);

        try {
          is = stockURL.openStream();
          BufferedReader reader = new BufferedReader(new InputStreamReader(is));
          try {
            String line;
            while ((line = reader.readLine()) != null) {
//                                Log.d(TAG,"Line Read: " + String.valueOf(System.currentTimeMillis() - time_passed));
              String trimmed_line = line.trim();
              trimmed_line = trimmed_line.replaceAll("\\s+", "");
              String[] RowData = trimmed_line.split(",");
              int level_id = Integer.parseInt(RowData[0]);
              confidence = Float.parseFloat(RowData[1]);
              if (last_location_x != -1 && last_location_y != -1) {
                last_location_x = current_location_x;
                last_location_y = current_location_y;
              }
              current_location_x = Float.parseFloat(RowData[2]);
              current_location_y = Float.parseFloat(RowData[3]);
              if (last_location_x == -1 && last_location_y == -1) {
                last_location_x = current_location_x;
                last_location_y = current_location_y;
              }
              heading = Float.parseFloat(RowData[4]);
              transistion_speed = Float.parseFloat(RowData[5]);
              String outer_colour = "#" + RowData[6];
              outer_alpha = Float.parseFloat(RowData[7]);
              String inner_colour = "#" + RowData[8];
              inner_start_alpha = Float.parseFloat(RowData[9]);
              pulse_speed = Float.parseFloat(RowData[11]);
              pulse_wait = Float.parseFloat(RowData[12]);
              scale = Float.parseFloat(RowData[13]);

              m.userLocation.setImageScale(scale);

              m.userLocation.setLevel(m.getLevelsIndexWithMapID(level_id));

              m.userLocation.setConfidence(confidence);
              if (counter == 0) {
                m.userLocation.getTransform().setTranslationX(current_location_x);
                m.userLocation.getTransform().setTranslationY(current_location_y);
              } else {
                m.userLocation.setMoveTo(current_location_x, current_location_y);
              }

//                                float currentHeading = m.userLocation.getTransform().getRotation();
//                                float deltaHeading = heading - currentHeading;
//                                deltaHeading = deltaHeading/5;
//                                float totalHeading = currentHeading;
//                                float time_take = 500 / 5;
//                                int incrementer = 1;

              m.userLocation.getTransform().setRotation(heading);

//                                while (totalHeading <= heading){
//                                    totalHeading = totalHeading + deltaHeading * incrementer;
//                                    m.userLocation.getTransform().setRotation(totalHeading);
//                                    try {
//                                        Thread.sleep((long)time_take);
//                                    } catch (InterruptedException e) {
//                                        e.printStackTrace();
//                                    }
//                                    counter++;
//                                }

              m.userLocation.setSpeed(transistion_speed);

              m.userLocation.setConfidenceAlpha(outer_alpha);

              m.userLocation.setInnerPulseColor(inner_colour);

              m.userLocation.setStartAlpha(inner_start_alpha);

              m.userLocation.setPulseAnimationDuration(pulse_speed);

              m.userLocation.setDelayBetweenPulseCycles(pulse_wait);

              counter++;

              Helpers helpers = new Helpers();
              float distance_x = (float) helpers.sqr(current_location_x - last_location_x);
              float distance_y = (float) helpers.sqr(current_location_y - last_location_y);

              float distance = (float) Math.sqrt(distance_x + distance_y);

              float time_float = distance / transistion_speed;

              time_float = time_float * 1000;

              long time = (long) time_float;

              try {
                Thread.sleep(time);
//                                    if (m.getPathForCurrentFloor() != null){
//                                        Point current_position = new Point((double)m.userLocation.getTransform().getTranslationX(),(double)m.userLocation.getTransform().getTranslationY(),0);
//                                        boolean yes_no = helpers.shouldCorrectToRerouteWayfindPath(m.getPathForCurrentFloor(),current_position,100);
//                                        Log.d(TAG,String.valueOf(yes_no));
//                                    }
              } catch (InterruptedException e) {
                //handle
              }
            }
          } catch (IOException ex) {
            // handle exception
          } finally {
            try {
              is.close();
            } catch (IOException e) {
              // handle exception
            }
          }
        } catch (IOException e) {
          e.printStackTrace();
        }
      } catch (MalformedURLException e) {
        e.printStackTrace();
      }

    }
  }).start();
}

//
@Override
public boolean onCreateOptionsMenu(Menu menu) {
  // Inflate the menu items for use in the action bar
  MenuInflater inflater = getMenuInflater();
  inflater.inflate(R.menu.main_activity_actions, menu);

  MenuItem searchItem = menu.findItem(R.id.action_search);
  final SearchView searchView = (SearchView) searchItem.getActionView();
  final Menu m = menu;
  searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
    @Override
    public boolean onQueryTextSubmit(String query) {
      lastSearchQuery = query;
      searchView.setIconified(true);
      searchView.clearFocus();
      (m.findItem(R.id.action_search)).collapseActionView();
      showDestinationsDialog(searchDestination);
      return true;
    }

    @Override
    public boolean onQueryTextChange(String newText) {
      return false;
    }
  });

  return super.onCreateOptionsMenu(menu);
}

@Override
public boolean onOptionsItemSelected(MenuItem item) {
  // Handle presses on the action bar items
  switch (item.getItemId()) {
    case R.id.action_amneties_visibilty:
      showAmenitiesVisibilityDialog();
      return true;
    case R.id.action_from:
      showDestinationsDialog(fromDestination);
      return true;
    case R.id.action_to:
      showDestinationsDialog(toDestination);
      return true;
    case R.id.action_search:
//      listView.setVisibility(View.VISIBLE);
      return true;
    case R.id.action_visibility_elements:
      showElementsVisibilityDialog();
      return true;
    default:
      return super.onOptionsItemSelected(item);
  }
}

private static final int findClosestAmenity = 0;

private void showAmenitiesDialog(final int trigger) {

  AlertDialog.Builder builder = new AlertDialog.Builder(this);
  switch (trigger) {
    case findClosestAmenity:
      builder.setTitle("Closest Amenity of...");
      break;
  }
  final ArrayAdapter<String> stringArrayAdapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1);
  for (com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.Amenity amenity : m.venueData.amenities) {
    stringArrayAdapter.add(amenity.bean.localizedText);
  }
  builder.setNegativeButton(android.R.string.no, new DialogInterface.OnClickListener() {
    public void onClick(DialogInterface dialog, int which) {
      // do nothing
    }
  });
  builder.setAdapter(stringArrayAdapter, new DialogInterface.OnClickListener() {
    @Override
    public void onClick(DialogInterface dialog, int which) {
      String strName = stringArrayAdapter.getItem(which);
      Toast.makeText(context, strName, Toast.LENGTH_SHORT).show();
      switch (trigger) {
        case findClosestAmenity:
          com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.Amenity amenity = m.venueData.amenities[which];
          m.wayfindToClosestAmenity(amenity.bean.componentId, new M.CallbackWaypoint() {
            @Override
            public void callback(Waypoint waypoint) {
              m.setToWaypoint(waypoint);
            }
          });
          break;
      }
    }
  });
  builder.show();
}

private static final int fromDestination = 0;
private static final int toDestination = 1;
private static final int highlightDestination = 2;
private static final int searchDestination = 3;

private void showDestinationsDialog(final int destinationWay) {
  final AlertDialog.Builder builder = new AlertDialog.Builder(getSupportActionBar().getThemedContext());
  final ArrayAdapter<String> destinations = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1);
  ArrayList<Destination> destinationsByQuery = null;
  switch (destinationWay) {
    case fromDestination:
    case toDestination:
    case highlightDestination:
      for (Destination destination : m.venueData.destinations) {
        destinations.add(destination.name);
      }
      break;
    case searchDestination:
      destinationsByQuery = m.getDestinationsByQuery(lastSearchQuery, 0);
      for (Destination destination : destinationsByQuery) {
        destinations.add(destination.name);
      }
      break;
  }
  if (destinations.getCount() == 0) return;
  builder.setNegativeButton(android.R.string.no, new DialogInterface.OnClickListener() {
    public void onClick(DialogInterface dialog, int which) {
    }
  });
  final ArrayList<Destination> finalDestinationsByQuery = destinationsByQuery;
  builder.setAdapter(destinations, new DialogInterface.OnClickListener() {
    @Override
    public void onClick(DialogInterface dialog, int which) {
      String strName = destinations.getItem(which);
      Destination d;
      Toast.makeText(context, strName, Toast.LENGTH_SHORT).show();
      switch (destinationWay) {
        case fromDestination:
          builder.setTitle("From");
          m.setFromWaypoint(m.getWaypointsOfDestination(m.venueData.destinations[which])[0]);
          break;
        case toDestination:
          builder.setTitle("To");
          m.setToWaypoint(m.getWaypointsOfDestination(m.venueData.destinations[which])[0]);
          break;
        case highlightDestination:
          builder.setTitle("Highlight Destination");
          d = m.venueData.destinations[which];
          boolean b = m.cameraToUnit(d.id);
          if (false) return;
          m.setHighlightStateByType(Unit.class, false);
          m.setLevelByDestinationID(d.id);
          m.setHighlightOnUnitsByDestinationID(d.id, true);
          break;
        case searchDestination:
          builder.setTitle("Search results");
          d = finalDestinationsByQuery.get(which);
          m.setHighlightStateByType(Unit.class, false);
          m.setLevelByDestinationID(d.id);
          m.cameraToUnit(d.id);
          m.setHighlightOnUnitsByDestinationID(d.id, true);
          break;
      }
    }
  });
  builder.show();
}

private void showCategoryDialog() {
  AlertDialog.Builder builder = new AlertDialog.Builder(this);
  builder.setTitle("Select Category.");
  final ArrayAdapter<String> categoriesAdapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1);
  for (Category category : m.venueData.categories) {
    categoriesAdapter.add(category.name);
  }
  builder.setNegativeButton(android.R.string.no, new DialogInterface.OnClickListener() {
    public void onClick(DialogInterface dialog, int which) {
      // do nothing
    }
  });
  builder.setAdapter(categoriesAdapter, new DialogInterface.OnClickListener() {
    @Override
    public void onClick(DialogInterface dialog, int which) {
      String strName = categoriesAdapter.getItem(which);
//      Toast.makeText(context, strName, Toast.LENGTH_SHORT).show();
      Category category = m.venueData.categories[which];
      m.unHighlightUnits();
      m.highlightUnitsByCategory(category);
    }
  });
  builder.show();
}

private void showElementsVisibilityDialog() {
  selectedItems.clear();
  AlertDialog.Builder builder = new AlertDialog.Builder(this);
  builder.setTitle("Elements Visibility");
  String[] names = new String[]{"Labels", "Amenities", "Map Labels", "Destination Labels", "Kiosks", "Obstacles", "Escalators", "Elevators", "Stairs", "Units", "ParkingLots", "StreetsMajor", "StreetsMinor", "StreetsSmallAlleys", "MallBoundary", "Background", "Restrooms", "Corridors", "Kiosks", "HeadsUpDisplay", "ArtLayer1", "ArtLayer2", "ArtLayer3", "ArtLayer4", "ArtLayer5", "ArtLayer6", "ElementCustom"};
  final boolean[] states = m.getElementsActivness();
  builder.setMultiChoiceItems(names, states,
      new DialogInterface.OnMultiChoiceClickListener() {
        @Override
        public void onClick(DialogInterface dialog, int which, boolean isChecked) {
          if (isChecked) {
            // If the user checked the iteadd it to the selected items
            selectedItems.add(which);
          } else if (selectedItems.contains(which)) {
            // Else, if the item is already in the array, remove it
            selectedItems.remove(Integer.valueOf(which));
          }
        }
      });
  builder.setNegativeButton(android.R.string.no, new DialogInterface.OnClickListener() {
    public void onClick(DialogInterface dialog, int which) {
      // do nothing
    }
  });
  builder.setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
    @Override
    public void onClick(DialogInterface dialog, int which) {
      for (int i = 0; i < selectedItems.size(); i++) {
        int integer = selectedItems.get(i);
        states[integer] = true;
      }
      m.setElementsActivness(states);
    }
  });
  builder.show();
}

private void showAmenitiesVisibilityDialog() {
  selectedItems.clear();
  AlertDialog.Builder builder = new AlertDialog.Builder(this);
  builder.setTitle("Amenities Visibility");
  String[] names = new String[m.venueData.amenities.length];
  final boolean[] states = m.getAmenitiesVisibility();
  for (int i = 0; i < m.venueData.amenities.length; i++) {
    names[i] = m.venueData.amenities[i].bean.localizedText;
  }
  builder.setMultiChoiceItems(names, states,
      new DialogInterface.OnMultiChoiceClickListener() {
        @Override
        public void onClick(DialogInterface dialog, int which, boolean isChecked) {
          if (isChecked) {
            // If the user checked the item, add it to the selected items
            selectedItems.add(which);
          } else if (selectedItems.contains(which)) {
            // Else, if the item is already in the array, remove it
            selectedItems.remove(Integer.valueOf(which));
          }
        }
      });
  builder.setNegativeButton(android.R.string.no, new DialogInterface.OnClickListener() {
    public void onClick(DialogInterface dialog, int which) {
      // do nothing
    }
  });
  builder.setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
    @Override
    public void onClick(DialogInterface dialog, int which) {
      for (int i = 0; i < selectedItems.size(); i++) {
        int integer = selectedItems.get(i);
        states[integer] = true;
      }
      m.setAmenitiesVisibility(states);
    }
  });
  builder.show();
}

private void showTextDirections() {
  textDir.setText("Text directions show up here");
  new Thread(new Runnable() {
    @Override
    public void run() {
      Log.d("Text Directions", "Here");
      String instructions = "";
      textDirectionInstruction = m.getTextDirectionInstruction(true, 30, 50);
      if (textDirectionInstruction == null) {
        instructions = "No X and Y Scale set. Thus no directions are possible!";
      } else {
        for (int i = 0; i < textDirectionInstruction.size(); i++) {
          textDirectionInstructions = textDirectionInstruction.get(i).toArray(new TDInstruction[textDirectionInstruction.size()]);
          for (TDInstruction instruction : textDirectionInstructions) {
            if (instruction != null) {
              if (!instruction.output.isEmpty()) {
                distance_calc = 0;
                distance = "";
                distance_calc = (int) Math.floor(instruction.distanceToNextMeters);
                distance = Integer.toString(distance_calc);
                if (!distance.equals("0")) {
                  instructions += instruction.output + " for " + distance + " meters \n";
                } else {
                  distance_calc = 0;
                  distance = "";
                  instructions += instruction.output + "\n";
                }
              }
            }
          }
        }
      }
      final String finalInstructions = instructions;
      runOnUiThread(new Runnable() {
        @Override
        public void run() {
          textDir.setText(finalInstructions);
        }
      });
    }
  }).start();
}

private void showZonesDialog() {
  if (m.venueData.zones == null || m.venueData.zones.length == 0) return;
  AlertDialog.Builder builder = new AlertDialog.Builder(this);
  builder.setTitle("Select Zone.");
  final ArrayAdapter<String> zoneAdapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1);
  for (Zone zone : m.venueData.zones) {
    zoneAdapter.add(zone.zoneDetails[0].zoneName + " id:" + zone.zoneId);
  }
  builder.setNegativeButton(android.R.string.no, new DialogInterface.OnClickListener() {
    public void onClick(DialogInterface dialog, int which) {
      // do nothing
    }
  });
  builder.setAdapter(zoneAdapter, new DialogInterface.OnClickListener() {
    @Override
    public void onClick(DialogInterface dialog, int which) {
//      String strName = zoneAdapter.getItem(which);
//      Toast.makeText(context, strName, Toast.LENGTH_SHORT).show();
      Zone zone = m.venueData.zones[which];
//      ArrayList<Unit> unitsWithZone = m.getUnitsWithZone(zone);
      m.unHighlightUnits();
      Unit[] units = m.highlightUnitsByZone(zone);
      RectF rectF = new RectF();
      for (int i = 0; i < units.length; i++) {
        rectF.union(units[i].getBBox());
      }
      m.camera.zoomTo(rectF, 50);
    }
  });
  builder.show();
}
}
