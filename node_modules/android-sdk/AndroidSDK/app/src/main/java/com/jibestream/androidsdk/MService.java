package com.jibestream.androidsdk;

import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.Paint;
import android.os.Binder;
import android.os.IBinder;
import android.support.v4.content.LocalBroadcastManager;
import android.text.TextPaint;
import android.util.Log;

import com.jibestream.androidsdk.customElements.AmenityCustomScale;
import com.jibestream.androidsdk.customElements.Child;
import com.jibestream.androidsdk.customElements.Compass;
import com.jibestream.androidsdk.customElements.CustomRoad;
import com.jibestream.androidsdk.customElements.MiniMap;
import com.jibestream.androidsdk.customElements.MoverHead;
import com.jibestream.androidsdk.customElements.MoverTail;
import com.jibestream.androidsdk.customElements.MyElementCustom;
import com.jibestream.androidsdk.customElements.Papa;
import com.jibestream.androidsdk.customElements.Pin;
import com.jibestream.androidsdk.customElements.Route;
import com.jibestream.androidsdk.customElements.SpinnerTest;
import com.jibestream.androidsdk.customElements.UnitLabelsSameSize;
import com.jibestream.androidsdk.customElements.WayfindKiosk;
import com.jibestream.androidsdk.customElements.WayfindManager;
import com.jibestream.androidsdk.customElements.YouAreHere;
import com.jibestream.jibestreamandroidlibrary.elements.Amenity;
import com.jibestream.jibestreamandroidlibrary.elements.Element;
import com.jibestream.jibestreamandroidlibrary.elements.ElementMap;
import com.jibestream.jibestreamandroidlibrary.elements.FrameRatePerSecond;
import com.jibestream.jibestreamandroidlibrary.elements.Popup;
import com.jibestream.jibestreamandroidlibrary.elements.Unit;
import com.jibestream.jibestreamandroidlibrary.elements.UnitLabel;
import com.jibestream.jibestreamandroidlibrary.intentFilters.IntentFilterEngine;
import com.jibestream.jibestreamandroidlibrary.intentFilters.IntentFilterTouch;
import com.jibestream.jibestreamandroidlibrary.intents.IntentTouch;
import com.jibestream.jibestreamandroidlibrary.main.M;
import com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.Destination;
import com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.Waypoint;
import com.jibestream.jibestreamandroidlibrary.shapes.Shape;
import com.jibestream.jibestreamandroidlibrary.styles.CssStyles;
import com.jibestream.jibestreamandroidlibrary.styles.RenderStyle;
import com.jibestream.jibestreamandroidlibrary.styles.RenderStyleIcon;
import com.jibestream.jibestreamandroidlibrary.svg.SVGParser;
import com.jibestream.jibestreamandroidlibrary.utils.ColorsMaterialDesign;

import org.xmlpull.v1.XmlPullParserException;

import java.io.IOException;
import java.util.List;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;

//import com.jibestream.androidsdk.customElements.PinWithShape;

/**
 * Model class that holds all shared data and
 * application state.
 * Created by emmanuel on 15-05-29.
 */
public class MService extends Service {
private static final String TAG = "MService";
private final IBinder mBinder = new MBinder();
private M m;
public final Popup popUp = new Popup();

public BroadcastReceiver broadcastRieverTouchLong;
public BroadcastReceiver broadcastReceiverTouchSinglePopUp;
public BroadcastReceiver broadcastReceiverTouchDouble;
public BroadcastReceiver broadcastReceiverTouchSingle;

//
@Override
public IBinder onBind(Intent arg0) {
  return mBinder;
}

public class MBinder extends Binder {
  public M getM() {
    return MService.this.m;
  }
}

@Override
public void onCreate() {
  super.onCreate();
  Log.d(TAG, "onCreate");
  //
  m = new M(getApplicationContext());
  //Set the custom classes to be used instead of the defaults
//  m.classLib.unitClass = com.jibestream.androidsdk.customElements.Unit.class;
  m.classLib.unitLabelClass = UnitLabelsSameSize.class;
//  m.classLib.unitLabelClass = UnitLabelBubble.class;
//  m.classLib.unitLabelClass = UnitLabelEllipsis.class;
//  m.classLib.amenityClass = AmenityCol.class;
  m.classLib.amenityClass = AmenityCustomScale.class;
//  m.classLib.pinClass = PinWithShape.class;
  m.classLib.pinClass = Pin.class;
  m.classLib.youAreHereClass = YouAreHere.class;
  m.classLib.routeClass = Route.class;
  m.classLib.wayfindKioskClass = WayfindKiosk.class;
  m.classLib.moverHeadClass = MoverHead.class;
  m.classLib.moverTailClass = MoverTail.class;
  m.classLib.streetMajorClass = CustomRoad.class;
  m.classLib.elementCustomClass = MyElementCustom.class;
  //
  initBroadcastListeners();
  //
  LocalBroadcastManager.getInstance(this).registerReceiver(new BroadcastReceiver() {
    @Override
    public void onReceive(Context context, Intent intent) {
      customStyles();
      customElements();
//      customWayfind();
//      anchorLogoes();
//      setTimer();
    }
  }, new IntentFilterEngine(IntentFilterEngine.COMPLETE));
  //
  LocalBroadcastManager.getInstance(this).registerReceiver(new BroadcastReceiver() {
    @Override
    public void onReceive(Context context, Intent intent) {
      LocalBroadcastManager localBroadcastManager = LocalBroadcastManager.getInstance(context);
      localBroadcastManager.registerReceiver(broadcastReceiverTouchSingle, new IntentFilterTouch(m, IntentFilterTouch.TYPE_SINGLE));
      localBroadcastManager.registerReceiver(broadcastReceiverTouchDouble, new IntentFilterTouch(m, IntentFilterTouch.TYPE_DOUBLE));
      localBroadcastManager.registerReceiver(broadcastRieverTouchLong, new IntentFilterTouch(m, IntentFilterTouch.TYPE_LONG_PRESS));
      localBroadcastManager.registerReceiver(broadcastReceiverTouchSinglePopUp, new IntentFilterTouch(m, IntentFilterTouch.TYPE_SINGLE));
    }
  }, new IntentFilterEngine(IntentFilterEngine.RESUME));


  LocalBroadcastManager.getInstance(this).registerReceiver(new BroadcastReceiver() {
    @Override
    public void onReceive(Context context, Intent intent) {
      LocalBroadcastManager localBroadcastManager = LocalBroadcastManager.getInstance(context);
      localBroadcastManager.unregisterReceiver(broadcastReceiverTouchSingle);
      localBroadcastManager.unregisterReceiver(broadcastReceiverTouchDouble);
      localBroadcastManager.unregisterReceiver(broadcastRieverTouchLong);
      localBroadcastManager.unregisterReceiver(broadcastReceiverTouchSinglePopUp);
    }
  }, new IntentFilterEngine(IntentFilterEngine.PAUSE));

}

@Override
public int onStartCommand(Intent intent, int flags, int startId) {
  Log.d(TAG, "onStartCommand");
  return START_REDELIVER_INTENT;
}

@Override
public void onDestroy() {
  Log.d(TAG, "onDestroy");
  super.onDestroy();
}

@Override
public void onTaskRemoved(Intent rootIntent) {
  super.onTaskRemoved(rootIntent);
  m.onDestroy();
  stopSelf();
}

private void initBroadcastListeners() {

  // Tap event updates selection snd Destination FRom
  broadcastReceiverTouchDouble = new BroadcastReceiver() {
    Element prev = null;

    @Override
    public void onReceive(Context context, Intent intent) {

      IntentTouch intentTouch = (IntentTouch) intent;
//      if (prev != null) prev.setSelectState(false);
      final Element element = intentTouch.element;
//      element.setSelectState(true);
      prev = element;

      if (element instanceof Unit) {
        Unit unit = (Unit) element;
        if (unit.getWaypoints() == null) return;
        Waypoint waypoint = unit.getWaypoints()[0];
        m.setFromWaypoint(waypoint);

      } else if (element instanceof Amenity) {
        Amenity amenity = (Amenity) element;
        m.setFromWaypoint(amenity.waypoint);
      }
      //Building.setFrom(m,Building.getWaypointWithID(m,4073));
    }
  };

  // Tap event updates selection snd Destination TO
  broadcastReceiverTouchSingle = new BroadcastReceiver() {
    Element prev = null;

    @Override
    public void onReceive(Context context, Intent intent) {
      IntentTouch intentTouch = (IntentTouch) intent;
      final Element element = intentTouch.element;
      if (element instanceof Unit) {
        Unit unit = (Unit) element;
        if (unit.getDestinationIDs() == null || unit.getDestinationIDs().length == 0) return;
        Waypoint waypoint = unit.getWaypoints()[0];
        m.setToWaypoint(waypoint);
        if (prev != null) prev.setSelectState(false);
        element.setSelectState(true);
        prev = element;
      } else if (element instanceof Amenity) {
        Amenity amenity = (Amenity) element;
        m.setToWaypoint(amenity.waypoint);
        if (prev != null) prev.setSelectState(false);
        element.setSelectState(true);
        prev = element;
      }
      //Building.setTo (m,Building.getWaypointWithID(m,4121));
    }
  };

  //

  broadcastRieverTouchLong = new BroadcastReceiver() {
    @Override
    public void onReceive(Context context, Intent intent) {
      IntentTouch intentTouch = (IntentTouch) intent;
      final Element element = intentTouch.element;
      Unit unit = null;
      if (element instanceof Unit) {
        unit = (Unit) element;
      }
      if (unit != null) {
        popUp.setVisible(false);
        final Destination[] destinations = unit.getDestinations();
        if (destinations != null && destinations.length > 0) {
          final Destination destination = destinations[0];
          if (destination == null) return;
          popUp.setLevel(element.getLevel());
          popUp.setTitleString(destination.name);
          //
          if (destination.category != null && destination.category.length > 3) {
            String asString = destination.category[0] + ", " + destination.category[1] + ", " + destination.category[2];
            int max = Math.min(50, asString.length() - 1);
            String s = asString.substring(0, max) + "...";
            popUp.setSubTitleString(s);
          } else {
            popUp.setSubTitleString("");
          }
          //
          if (destination.description != null && destination.description.length() > 0) {
            int maxBodyString = Math.min(300, destination.description.length() - 1);
            String bodyString = destination.description.substring(0, maxBodyString) + "...";
            popUp.setBodyString(bodyString);
          }
          final Waypoint[] waypointsOfDestination = m.getWaypointsOfDestination(unit.getDestinations()[0]);
          popUp.getTransform().setTranslationX((float) waypointsOfDestination[0].x);
          popUp.getTransform().setTranslationY((float) waypointsOfDestination[0].y);
//          unit.addChild(popUp);
          popUp.setVisible(true);
        }
      }
    }
  };


  broadcastReceiverTouchSinglePopUp = new BroadcastReceiver() {
    @Override
    public void onReceive(Context context, Intent intent) {
      IntentTouch intentTouch = (IntentTouch) intent;
      if (intentTouch.id == popUp.id) {
        popUp.setVisible(false);
      }
    }
  };

}

private void customStyles() {
  /////////////////////   Defining new styles  for elements the engine   will instantiate
  RenderStyle unitStyle = new RenderStyle(Paint.Style.FILL_AND_STROKE);
  unitStyle.paintFill.setColor(ColorsMaterialDesign.GREY7);
  unitStyle.paintStroke.setColor(ColorsMaterialDesign.GREY9);
  unitStyle.paintStroke.setStrokeWidth(0.25f);
  unitStyle.paintStroke.setAntiAlias(true);
  unitStyle.paintStroke.setStyle(Paint.Style.STROKE);
  m.cssStyles.setUnits(unitStyle, true);
  m.cssStyles.setKiosks(unitStyle, true);

  RenderStyle obstaclesStyle = new RenderStyle(Paint.Style.FILL_AND_STROKE);
  obstaclesStyle.paintFill.setColor(ColorsMaterialDesign.GREY9);
  obstaclesStyle.paintStroke.setColor(ColorsMaterialDesign.GREY7);
  obstaclesStyle.paintStroke.setStrokeWidth(1);
  obstaclesStyle.paintStroke.setAntiAlias(true);
  m.cssStyles.setObstacles(obstaclesStyle, true);

  RenderStyle parkingStyle = new RenderStyle(Paint.Style.FILL);
  parkingStyle.paintFill.setColor(ColorsMaterialDesign.GREY8);
  parkingStyle.paintFill.setAntiAlias(true);
  m.cssStyles.setParkingLots(parkingStyle, true);
  m.cssStyles.setParkingLotsInterior(parkingStyle, true);
//  int patternID = getResources().getIdentifier("croos", "drawable", "com.jibestream.androidsdk");
//  Bitmap patternBMP = BitmapFactory.decodeResource(getResources(), patternID);
//  Bitmap patternBMP = m.bitmapLib.jibestream;
//  BitmapShader patternBMPshader = new BitmapShader(patternBMP, Shader.TileMode.REPEAT, Shader.TileMode.REPEAT);
//  parkingStyle.paintFill.setColor(0xFFFFFFFF);
//  parkingStyle.paintFill.setShader(patternBMPshader);

  RenderStyle stairsStyle = new RenderStyle(Paint.Style.FILL);
  stairsStyle.paintFill.setColor(ColorsMaterialDesign.RED9);
  m.cssStyles.setStairs(stairsStyle, true);

  RenderStyle escalatorsStyle = new RenderStyle(Paint.Style.FILL);
  escalatorsStyle.paintFill.setColor(ColorsMaterialDesign.RED7);
  m.cssStyles.setEscalators(escalatorsStyle, true);

  RenderStyle elevatorsStyle = new RenderStyle(Paint.Style.FILL);
  elevatorsStyle.paintFill.setColor(ColorsMaterialDesign.RED5);
  m.cssStyles.setElevators(elevatorsStyle, true);

  RenderStyle floorStyle = new RenderStyle(Paint.Style.FILL_AND_STROKE);
  floorStyle.paintFill.setColor(ColorsMaterialDesign.GREY8);
  floorStyle.paintStroke.setColor(ColorsMaterialDesign.BLACK);
  floorStyle.paintStroke.setStrokeWidth(8);
  floorStyle.paintStroke.setStyle(Paint.Style.STROKE);
  m.cssStyles.setMallBoundary(floorStyle, true);

  RenderStyle streetsStyle = new RenderStyle(Paint.Style.STROKE);
  streetsStyle.paintStroke.setColor(ColorsMaterialDesign.GREY8);
  streetsStyle.paintStroke.setAntiAlias(true);
  streetsStyle.paintStroke.setStrokeWidth(5);
  m.cssStyles.setRenderStyle(CssStyles.Streets_Minor, streetsStyle, true);
  m.cssStyles.setRenderStyle(CssStyles.Streets_SmallAlleys, streetsStyle, true);

  RenderStyle streetsMajorStyle = new RenderStyle(Paint.Style.STROKE);
  streetsMajorStyle.paintStroke.setColor(ColorsMaterialDesign.GREY8);
  streetsMajorStyle.paintStroke.setAntiAlias(true);
  streetsMajorStyle.paintStroke.setStrokeWidth(15);
  m.cssStyles.setRenderStyle(CssStyles.Streets_Major, streetsMajorStyle, true);

  RenderStyle bgStyle = new RenderStyle(Paint.Style.FILL);
  bgStyle.paintFill.setColor(ColorsMaterialDesign.GREY9);
  m.cssStyles.setRenderStyle(m.cssStyles.Background, bgStyle, true);
  m.cssStyles.setCorridor(bgStyle, true);

  RenderStyle wcStyle = new RenderStyle(Paint.Style.FILL);
  wcStyle.paintFill.setColor(ColorsMaterialDesign.GREY5);
  m.cssStyles.setRestrooms(wcStyle, true);

  RenderStyle renderStyleText = new RenderStyle(Paint.Style.FILL);
  renderStyleText.paintFill.setAntiAlias(true);
  renderStyleText.paintFill.setColor(ColorsMaterialDesign.BLUE7);

  RenderStyle renderStyleDebug;
  renderStyleDebug = new RenderStyle(Paint.Style.STROKE);
  renderStyleDebug.paintStroke.setColor(Color.RED);

  RenderStyleIcon renderStyleIconIdle = new RenderStyleIcon();
  renderStyleIconIdle.renderStyleBG.paintFill.setColor(ColorsMaterialDesign.GREY3);
  renderStyleIconIdle.renderStyleBG.paintFill.setAntiAlias(true);
//  renderStyleIconIdle.renderStyleBG.paintFill.setShadowLayer(12, 0, 0, 0x33000000);

  renderStyleIconIdle.renderStyleMG = new RenderStyle(Paint.Style.FILL_AND_STROKE);
  renderStyleIconIdle.renderStyleMG.paintFill.setColor(ColorsMaterialDesign.GREY5);
  renderStyleIconIdle.renderStyleMG.paintFill.setAntiAlias(true);
//  renderStyleIconIdle.renderStyleMG.paintFill.setShadowLayer(12, 0, 0, 0x66000000);
  renderStyleIconIdle.renderStyleMG.paintStroke.setColor(ColorsMaterialDesign.GREY8);
  renderStyleIconIdle.renderStyleMG.paintStroke.setStrokeWidth(5);

  renderStyleIconIdle.renderStyleFG.paintFill.setColor(ColorsMaterialDesign.GREY8);
  renderStyleIconIdle.renderStyleFG.paintFill.setAntiAlias(true);
//  renderStyleIconIdle.renderStyleFG.paintFill.setShadowLayer(12, 0, 0, 0x66000000);
  m.iconStyles.setAmenitysIdle(renderStyleIconIdle, true);

  RenderStyleIcon renderStyleIconSelected = new RenderStyleIcon();
  renderStyleIconSelected.renderStyleBG.paintFill.setColor(ColorsMaterialDesign.GREY3);
  renderStyleIconSelected.renderStyleBG.paintFill.setAntiAlias(true);

  renderStyleIconSelected.renderStyleMG = new RenderStyle(Paint.Style.FILL_AND_STROKE);
  renderStyleIconSelected.renderStyleMG.paintFill.setColor(ColorsMaterialDesign.GREY8);
  renderStyleIconSelected.renderStyleMG.paintFill.setAntiAlias(true);
  renderStyleIconSelected.renderStyleMG.paintStroke.setColor(ColorsMaterialDesign.GREY5);
  renderStyleIconSelected.renderStyleMG.paintStroke.setStrokeWidth(2);
  renderStyleIconSelected.renderStyleMG.paintStroke.setAntiAlias(true);

  renderStyleIconSelected.renderStyleFG.paintFill.setColor(ColorsMaterialDesign.GREY5);
  renderStyleIconSelected.renderStyleFG.paintFill.setAntiAlias(true);
  m.iconStyles.setAmenitysSelected(renderStyleIconSelected, true);
}

private void customElements() {

  // init image model
//  mImage = new M(this);
//  mImage.amenityClass = AmenityCustom.class;
//  mImage.start(venueData, "");
  // set camera default frami§ng region
//  Handler handler = new Handler(new Handler.Callback() {
//    @Override
//    public boolean handleMessage(Message msg) {
//      int padding = -150;
//      RectF rectOfClassesInstances = (RectF) msg.obj;
//      rectOfClassesInstances.inset(padding, padding);
//      m.camera.setDefaultFraming(rectOfClassesInstances);
//      return false;
//    }
//  });
//  m.getRectOfClassesInstances(handler, new Class[]{Unit.class, ParkingLot.class}, m.getCurrentMapIndex()
//  );
//  RectF rectOfClassesInstances = Building.getRectOfClassesInstances(m, new Class[]{Unit.class, ParkingLot.class}, m.getCurrentMapIndex());
//  int padding = -150;
//  rectOfClassesInstances.inset(padding, padding);
//  m.camera.setDefaultFraming(rectOfClassesInstances);
/////////////////////////////////////////////////////////////////
////////////         Custom  objects addition         ///////////
////////////         to the display list              ///////////
/////////////////////////////////////////////////////////////////
//  m.addToMap(new Dots());
  m.addToMap(new Compass());
  m.addToMap(new FrameRatePerSecond());
  m.addToMap(new MiniMap());
//  m.addToMap(new MiniMapDebug());

  ElementMap papa = new Papa();
  ElementMap child = new Child();
  ElementMap child2 = new Child();
  ElementMap child3 = new Child();
  ElementMap child4 = new Child();
  papa.addChild(child);
  child.addChild(child2);
  child2.addChild(child3);
  child3.addChild(child4);

  papa.getTransform().setTranslationX(500);
  papa.getTransform().setTranslationY(500);
  child2.getTransform().setScaleX(4);

//  m.addToMap(papa);

  child.setHeadsUp(true);

  RenderStyle orange = new RenderStyle(Paint.Style.STROKE);
  orange.paintStroke.setAntiAlias(true);
  orange.paintStroke.setColor(ColorsMaterialDesign.ORANGE7);
  orange.paintStroke.setStrokeWidth(1);
  papa.setStyleIdle(orange);
  child.setStyleIdle(orange);


//  UserLocation userLocation = new UserLocation();
//  userLocation.setLevel(0);
//  m.addToMap(userLocation);
//  userLocation.getTransform().setTranslationX(1900);
//  userLocation.getTransform().setTranslationY(1900);

  final SpinnerTest spinner = new SpinnerTest();
  RenderStyle spinnerRenderStyle = new RenderStyle(Paint.Style.FILL);
  spinnerRenderStyle.paintFill.setColor(ColorsMaterialDesign.YELLOW5);
  spinner.setStyleIdle(spinnerRenderStyle);
  // To appear only on the first map of the m.maps array
  spinner.setLevel(0);
  // Add to the map
  m.addToMap(spinner);
  spinner.getTransform().setTranslationX(1000);
  spinner.getTransform().setTranslationY(1000);


//  for (com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.Path path : m.venueData.paths) {
//    final int type = path.type;
//    if (type == PathType.PATH_TYPE_NORMAL_PATH) continue;
//    for (int wpID : path.waypoints) {
//      final Waypoint waypoint = Building.getWaypointsById(m, wpID);
//      final int level = Building.getLevelIndexOfWaypointWithID(m, waypoint.id);
//      final ElementIcon elementIcon;
//      elementIcon = new ElementIcon();
//      elementIcon.setHeadsUp(true);
//      elementIcon.setLevel(level);
//      elementIcon.getTransform().setScale(0.2f);
//      elementIcon.getTransform().setTranslationX(waypoint.x);
//      elementIcon.getTransform().setTranslationY(waypoint.y);
//      m.addToMap(elementIcon);
//      int size = m.venueData.pathTypes.length;
//      for (int i = 0; i < size; i++) {
//        final PathType pathType = m.venueData.pathTypes[i];
//        if (pathType.pathTypeId == path.type) {
//          IconShape iconShape = m.iconShapeLib.getIcon(pathType.typeName);
//          elementIcon.setShape(iconShape);
//          break;
//        }
//      }
//    }
//  }

  popUp.setSelectable(true);
  m.addToMap(popUp);
  popUp.setVisible(false);
  popUp.setHeadsUp(true);
  popUp.setConstantScale(true);

//  final Circle hotSpotShape = new Circle();
//  hotSpotShape.setRadius(40);
//  final Element hotSpot = new Element();
//  hotSpot.setShape(hotSpotShape);
//  hotSpot.setSelectable(true);
//  hotSpot.getTransform().setTranslationX(400);
////  hotSpot.setStyleIdle(null);//after positioning uncomment
//  popUp.addChild(hotSpot);
//  m.addToMap(hotSpot);
//  m.getDispatcher().addListener(IntentTouch.TYPE_SINGLE, new IEventListener() {
//    @Override
//    public void onEvent(IEvent event) {
//      IntentTouch touchEvent = (IntentTouch) event;
//      if (touchEvent.element == hotSpot) {
//        Log.i(TAG, "do something");
//      }
//    }
//  });


  final RenderStyle renderStyle = new RenderStyle(Paint.Style.FILL);
  renderStyle.setFillColor(ColorsMaterialDesign.GREY9);
  renderStyle.setFillAlpha((int) (255 * 0.7f));
  popUp.setStyleIdle(renderStyle);


  TextPaint titleTextPaint = new TextPaint();
  titleTextPaint.setTextSize(34);
  titleTextPaint.setColor(ColorsMaterialDesign.AMBER9);
  popUp.getTitleStaticLayout().setTextPaint(titleTextPaint);

  TextPaint subTextPaint = new TextPaint();
  subTextPaint.setTextSize(26);
  subTextPaint.setColor(ColorsMaterialDesign.AMBER8);
  popUp.getSubTitleStaticLayout().setTextPaint(subTextPaint);

  TextPaint texPaint = new TextPaint();
  texPaint.setTextSize(25);
  texPaint.setColor(ColorsMaterialDesign.GREY4);
  popUp.getBodyStaticLayout().setTextPaint(texPaint);
}

private void anchorLogoes() {
// Anchor logoes
  // parser wont be able to successfully parse the source svgs
  // but logic will assist for possible raster sources or an update to the sources or parser
  final Element[] elementList = m.getElementList();
  for (int i = 0; i < elementList.length; i++) {
    final Element element = elementList[i];
    if (!(element instanceof UnitLabel)) continue;
    final UnitLabel unitLabel = (UnitLabel) element;
    final int[] destinationIDs = unitLabel.getDestinationIDs();
    if (destinationIDs == null) continue;
    if (destinationIDs.length == 0) continue;
    final int id = destinationIDs[0];
    final Destination destination = m.getDestinationByID(id);
    if (destination == null) continue;
    if (destination.sponsoredRating >= 50) {
      final String path = destination.helperImage;
      // fetch asset from the path
      final String svg = "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n" +
          "<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"-304 282.4 182.9 48.6\"\n" +
          "\t style=\"enable-background:new -304 282.4 182.9 48.6;\" xml:space=\"preserve\">\n" +
          "\t\t<g>\n" +
          "\t\t\t<g>\n" +
          "\t\t\t\t<path d=\"M-300.6,314.5c0.5,8.6,7,13.6,15.4,13.6c6.1,0,14.7-1.8,14.7-9.9c0-7.9-8-9-15.9-10.7c-8-1.6-16-3.7-16-13.2\n" +
          "\t\t\t\t\tc0-9.2,9-11.9,16.8-11.9c9.9,0,17.2,4.2,17.2,14.8h-3.4c-0.1-8.4-6-11.8-13.8-11.8c-6.3,0-13.4,2.4-13.4,9\n" +
          "\t\t\t\t\tc0,7.4,8,8.6,15.5,10.2c9.2,1.7,16.5,3.8,16.5,13.6c0,10-10,12.8-18.2,12.8c-10.6,0-18.5-5.6-18.8-16.5H-300.6z\"/>\n" +
          "\t\t\t\t<path d=\"M-261.2,307.2c-0.2,10.9,5.6,20.9,17.1,20.9c8.8,0,15-5.2,16.6-13.8h3.4c-1.8,10.9-9,16.8-20.1,16.8\n" +
          "\t\t\t\t\tc-13.6,0-20.7-10.7-20.5-23.5c-0.2-12.8,6.5-25.2,20.6-25.2c14.6,0,21.1,11.5,20.4,24.8H-261.2z M-227.1,304.2\n" +
          "\t\t\t\t\tc-0.2-9.8-6.4-18.8-17-18.8c-10.3,0-16.4,9.6-17.1,18.8H-227.1z\"/>\n" +
          "\t\t\t\t<path d=\"M-185.3,330h-3.4v-9.2h-0.2c-2.2,5.5-8.4,10.3-17.3,10.3c-8.8,0-15.6-3.3-15.6-13.1c0-10.9,9.4-13.1,17.1-13.7\n" +
          "\t\t\t\t\tc15.4-1.1,16-2.1,16-9.7c0-2.1-2.4-9.1-12.9-9.1c-8.3,0-13.8,4.3-14.3,12.4h-3.4c0.5-10.3,6.8-15.5,17.7-15.5\n" +
          "\t\t\t\t\tc8.1,0,16.3,2.5,16.3,12.1V330z M-188.7,303.6c-2.7,3.1-10.1,2.7-16.8,3.6c-8.1,0.9-12.8,3.8-12.8,10.8\n" +
          "\t\t\t\t\tc0,5.6,4.1,10.1,12.2,10.1c15.6,0,17.4-13.4,17.4-15.8C-188.7,312.3-188.7,303.6-188.7,303.6z\"/>\n" +
          "\t\t\t\t<path d=\"M-174.8,293.8h0.3c1.8-6.1,9.4-10.9,17.8-10.6v3.4c-3.6-0.5-8.7,0.5-12.8,4.5c-3.4,3.5-4.9,6.4-5.2,13.4v25.4h-3.4\n" +
          "\t\t\t\t\tv-46.4h3.4v10.3H-174.8z\"/>\n" +
          "\t\t\t\t<path d=\"M-154.6,314.5c0.5,8.6,7,13.6,15.4,13.6c6.1,0,14.7-1.8,14.7-9.9c0-7.9-8-9-15.9-10.7c-8-1.6-16-3.7-16-13.2\n" +
          "\t\t\t\t\tc0-9.2,9-11.9,16.8-11.9c9.9,0,17.2,4.2,17.2,14.8h-3.4c-0.2-8.4-6-11.8-13.8-11.8c-6.3,0-13.4,2.4-13.4,9\n" +
          "\t\t\t\t\tc0,7.4,8,8.6,15.5,10.2c9.2,1.7,16.5,3.9,16.5,13.7c0,10-10,12.8-18.2,12.8c-10.6,0-18.5-5.7-18.8-16.5h3.4V314.5z\"/>\n" +
          "\t\t</g>\n" +
          "\t</g>\n" +
          "</svg>\n";
      final SVGParser.ParsedSVG parsedSVG;
      try {
        parsedSVG = SVGParser.parseSVG(svg);
        final List<Element> elements = parsedSVG.elements;
        if (elements == null || elements.size() == 0) continue;
        //
        m.removeFromMap(unitLabel);
        //
        for (int j = 0; j < elements.size(); j++) {
          Element e = elements.get(j);
          final ElementMap elementMap = new ElementMap();
          final Shape shape = (Shape) e.getShape();
          shape.getBBox().set(parsedSVG.viewBox);
          elementMap.setShape(shape);
          //
          elementMap.getTransform().setTranslationX(unitLabel.getTransform().getTranslationX());
          elementMap.getTransform().setTranslationY(unitLabel.getTransform().getTranslationY());
          //
          elementMap.setLevel(unitLabel.getLevel());
          //
          final RenderStyle renderStyle = new RenderStyle(Paint.Style.FILL_AND_STROKE);
          renderStyle.paintFill.setColor(ColorsMaterialDesign.getRandomColor());
          renderStyle.paintStroke.setColor(ColorsMaterialDesign.getRandomColor());
          renderStyle.paintStroke.setStrokeWidth(2);
          elementMap.setStyleIdle(renderStyle);
          //
          m.addToMap(elementMap);
        }
      } catch (XmlPullParserException e) {
        e.printStackTrace();
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
  }
}

private void setTimer() {
  final Random random = new Random();
  Timer myTimer = new Timer();
  myTimer.schedule(new TimerTask() {
    @Override
    public void run() {
      Log.d(TAG, "Timer");
//        WAYFIND RANDOM
//      final int length = m.venueData.waypoints.length;
//        int i = random.nextInt(length - 1);
//        m.setFromWaypoint(m.venueData.waypoints[i]);
//        BLUEDOT
//        Log.d(TAG, "moving!");
//        final RectF r = m.defaultFramings[m.getCurrentMapIndex()];
//        final float x = r.centerX() + random.nextFloat() * 300f;
//        final float y = r.centerY() + random.nextFloat() * 300f;
//        final Transform transform = m.userLocation.getTransform();
//        if (transform.getTranslationX() == 0 && transform.getTranslationY() == 0) {
//          transform.setTranslationX(x);
//          transform.setTranslationY(y);
//        } else {
//          m.userLocation.setMoveTo(x, y);
//          transform.setRotation(random.nextFloat() * 360f);
//        }
//        GET ELEMENTS BY KEY VALUE
//      Element[] elements;
//      elements = m.getElementsByKeyValue("class", null);
//      elements = m.getElementsByKeyValue("class", CssStyles.Background);
//      elements = m.getElementsByKeyValue("class", CssStyles.Units);
//      elements = m.getElementsByKeyValue("class", "Parking-Zones");
//      for (int i = 0; i < elements.length; i++) {
//        Element element = elements[i];
//        element.setSelectable(false);
//        element.setVisible(false);
//      }
//      Log.d(TAG, " " + elements.length);

    }
  }, 0, 10000);
}

private void customWayfind() {
// TODO: 2016-05-24 stop wayfindmanager on M.pause()
  final WayfindManager wayfindManager = new WayfindManager(m, getApplicationContext());
  wayfindManager.start();
}

}


