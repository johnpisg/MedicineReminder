package com.jibestream.androidsdk.customElements;

import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Rect;

import com.jibestream.jibestreamandroidlibrary.elements.UnitLabel;
import com.jibestream.jibestreamandroidlibrary.main.Camera;
import com.jibestream.jibestreamandroidlibrary.main.M;
import com.jibestream.jibestreamandroidlibrary.utils.ColorsMaterialDesign;

/**
 * Created by emmanuel on 2016-01-27.
 */
public class UnitLabelEllipsis extends UnitLabel {
private final Paint paint;
private Rect bounds = new Rect();
private float textOffsetY;
private float textWidth;
private String outText;

public UnitLabelEllipsis() {
  setConstantScale(true);
  paint = new Paint();
  paint.setTextSize(30);
  paint.setTextAlign(Paint.Align.CENTER);
  paint.setColor(ColorsMaterialDesign.GREY9);
  paint.setAntiAlias(true);
  calc();
}

@Override
public void setText(String s) {
  super.setText(s);
  calc();
}

private void calc() {
  final String text = getText();
  if (text == null) return;
  paint.getTextBounds(text, 0, text.length(), bounds);
  textWidth = bounds.width();
  textOffsetY = bounds.height() * 0.5f;
}

@Override
public void onUpdate(M m, long timeElapsed, long timeTotal, int fps, Camera camera) {
  super.onUpdate(m, timeElapsed, timeTotal, fps, camera);
  if (outText == null || outText.isEmpty()) {
    setVisible(false);
  }
  //
  float calculatedWidth = width * camera.getZoom();
  if (calculatedWidth > textWidth) {
    outText = textString;
    setVisible(true);
    return;
  }
  int length = textString.length() - 1;
  int maxChar = (int) (length * calculatedWidth / textWidth);
  maxChar = Math.min(maxChar, length);
  maxChar -= 3;
  if (maxChar < 1) {
    setVisible(false);
    return;
  }
  outText = textString.substring(0, maxChar);
  if (length > maxChar) outText = outText + "...";
  setVisible(true);
}

@Override
public void onRender(Canvas canvas, Paint touchPaint) {
  if (outText == null) return;
  canvas.save();
  canvas.concat(getTransformation());
  canvas.translate(getOffsetX(), getOffsetY());
  canvas.translate(0, textOffsetY);
  canvas.drawText(outText, 0, 0, paint);
  canvas.restore();
}

}
