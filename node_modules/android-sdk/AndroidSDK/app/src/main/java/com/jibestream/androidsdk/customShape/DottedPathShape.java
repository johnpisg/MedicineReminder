package com.jibestream.androidsdk.customShape;

import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PathMeasure;
import android.graphics.RectF;

import com.jibestream.jibestreamandroidlibrary.shapes.JPath;

/**
 * Created by emmanuel on 15-08-28.
 */
public class DottedPathShape extends JPath {

private final float CIRCLE_MIN_SIZE = 2.5f;
private final float CIRCLE_MAX_SIZE = 5f;
private float steps = 0;
private float pathLength;
private PathMeasure pathMeasure = new PathMeasure(null, false);
private float totalStepsNeeded;
private float[] point;
private float stride;

public DottedPathShape() {
  super();
  point = new float[]{0f, 0f};
  calc();
}

private synchronized void calc() {
  final Path path = getPath();
  final RectF bbox = new RectF();
  path.computeBounds(bbox, true);
  setBBox(bbox);
  pathMeasure.setPath(path, false);
  pathLength = pathMeasure.getLength();
  stride = CIRCLE_MAX_SIZE * 2f;
  totalStepsNeeded = pathLength * 1.5f; //add 50% for easing out
  steps = 0;
}

@Override
public synchronized void setPath(Path path) {
  super.setPath(path);
  calc();
}


@Override
public synchronized void onDraw(Canvas canvas, Paint paint) {
  float subPathRatio, circleAnimSize, ii;
  for (float i = 0; i < steps; i += stride) {
    ii = i;
    if (ii > pathLength) ii = pathLength;
    subPathRatio = i / steps;
    final boolean valid = pathMeasure.getPosTan(ii, point, null);
    if (valid) {
      circleAnimSize = Math.max(CIRCLE_MIN_SIZE, CIRCLE_MAX_SIZE * subPathRatio);
      canvas.drawCircle(point[0], point[1], circleAnimSize, paint);
    }
  }
  steps += stride * 0.9f;//slow down by 10%
  if (steps > totalStepsNeeded) steps = totalStepsNeeded;
}
}
