package com.jibestream.jibestreamandroidlibrary.mapBuilderV3;

import com.jibestream.jibestreamandroidlibrary.main.M;

/**
 * Convenience class with Novomaps apis
 * Created by emmanuel on 15-05-29.
 */
public class NovomapV3Api {

private static final String TAG = "NovomapV3Api";

/**
 * Return the URL for devices
 *
 *
 * @param url
 * @param lid Location ID
 * @param did Device ID
 * @return The URL String
 */
public static String refresh(String url, int lid, int did) {
  String reqUrl = url + "/v3/location/" + lid + "/device/" + did + "/refresh";
  return reqUrl;
}

/**
 * Return the URL for all devices associated with a location
 *
 * @param lid locationId
 * @return The URL String
 */
public static String getDevices(String url,int lid) {
  String reqUrl = url + "/v3/location/" + lid + "/device";
  return reqUrl;
}

/**
 * Return the URL for the specified location resources, all of them. Recommended call that aggregates most call in one
 *
 * @param lid Location ID
 * @return The URL String LocationFull
 */
public static String getLocationFull(String url,int lid) {
  String reqUrl = url + "/v3/location/" + lid + "/full";
  return reqUrl;
}


/**
 * Return the URL for a list of all locations (i.e. venues) in the system
 *
 * @return The URL String [Location]
 */
public static String getLocation(String url) {
  String reqUrl = url + "/v3/location";
  return reqUrl;
}

/**
 * Return the URL for  the specified location resource, inclusive of all its subresources. See Sub Resources sheet.
 *
 * @param lid Location ID
 * @return The URL String LocationAll
 */
public static String getLocationAll(String url,int lid) {
  String reqUrl = url + "/v3/location/" + lid + "/all";
  return reqUrl;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Return a list of all maps associated with the specified location.
 *
 * @param lid
 * @return The URL String [Map]
 */
public static String getMaps(String url,int lid) {
  String reqUrl = url + "/v3/location/" + lid + "/map";
  return reqUrl;
}

/**
 * Return the URL for  the map resource associated with the map ID (MID)
 *
 * @param lid
 * @return The URL String
 */
public static String getResourcesOfMap(String url,int lid, int mid) {
  String reqUrl = url + "/v3/location/" + lid + "/map/" + mid;
  return reqUrl;
}

/**
 * Return the URL for  the specified map resource, inclusive of all its subresources
 *
 * @param lid
 * @param mid
 * @return The URL String
 */
public static String getResourcesAndSubOfMap(String url,int lid, int mid) {
  String reqUrl = url + "/v3/location/" + lid + "/map/" + mid + "/all";
  return reqUrl;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Return a list of all waypoints associated with the specified map and location
 *
 * @param lid
 * @param mid
 * @return The URL String
 */
public static String getMapsWaypoints(String url,int lid, int mid) {
  String reqUrl = url + "/v3/location/" + lid + "/map/" + mid + "/Waypoint";
  return reqUrl;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Return a list of all paths associated with the specified location.
 * A path is a line segment connecting 2 or more waypoints.
 *
 * @param lid
 * @return The URL String
 */
public static String getPaths(String url,int lid) {
  String reqUrl = url + "/v3/location/" + lid + "/path";
  return reqUrl;
}

/**
 * Return the URL for  the list of JPath Type Objects.
 *
 * @param lid
 * @return The URL String
 */
public static String getPathTypes(String url,int lid) {
  String reqUrl = url + "/v3/location/" + lid + "/path/type";
  return reqUrl;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Return a list of all destinations associated with the specified location.
 *
 * @param lid
 * @return The URL String
 */
public static String getDestinations(String url,int lid) {
  String reqUrl = url + "/v3/location/" + lid + "/destination";
  return reqUrl;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Return a list of all amenities associated with the specified location.
 *
 * @param lid
 * @return The URL String
 */
public static String getAmenities(String url,int lid) {
  String reqUrl = url + "/v3/location/" + lid + "/amenity";
  return reqUrl;
}

/**
 * Return the URL for  a list of all waypoints that are linked to the specified EntityType
 *
 * @param lid
 * @return
 */
public static String getWaypointsOfAmenities(String url,int lid, int aid) {
  String reqUrl = url + "/v3/location/" + lid + "/amenity/" + aid + "/Waypoint";
  return reqUrl;
}

}