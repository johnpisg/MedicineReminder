package com.jibestream.jibestreamandroidlibrary.shapes;

import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.PathMeasure;

import com.jibestream.jibestreamandroidlibrary.main.IElementProxyDirty;

/**
 * Animatable path from dots
 * Created by emmanuel on 15-05-29.
 */
public class JPathAnimatable extends JPath {
private float circleSize = 1.5f;
private float speedScale = 15f;
private float steps = 0;
private float pathLength;
private PathMeasure pathMeasure = new PathMeasure(null, false);
private float[] point = new float[]{0f, 0f};
private float stride;

public JPathAnimatable() {
  this(null);
}

public JPathAnimatable(Path path) {
  super(path);
  pathMeasure.setPath(path, false);
  calc();
}

private void calc() {
  pathLength = pathMeasure.getLength();
  stride = circleSize * 0.5f;
  steps = 0;
  final IElementProxyDirty elementProxyDirty = getElementProxyDirty();
  if (elementProxyDirty != null) elementProxyDirty.setDirtyShape(true);
}

@Override
public synchronized void setPath(Path path) {
  super.setPath(path);
  pathMeasure.setPath(path, false);
  calc();
}


@Override
public void onDraw(Canvas canvas, Paint paint) {
  canvas.drawCircle(0, 0, 5, paint);
  if (steps <= pathLength) {
    for (float i = 0; i < steps; i += stride) {
      pathMeasure.getPosTan(i, point, null);
      canvas.drawCircle(point[0], point[1], circleSize, paint);
    }
    steps += stride * speedScale;
  } else {
    steps = 0;
  }
}


public synchronized float getSpeedScale() {
  return speedScale;
}

public synchronized void setSpeedScale(float speedScale) {
  this.speedScale = speedScale;
  calc();
}

public synchronized float getCircleSize() {
  return circleSize;
}

public synchronized void setCircleSize(float circleSize) {
  this.circleSize = circleSize;
  calc();
}

}
