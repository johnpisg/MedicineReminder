package com.jibestream.jibestreamandroidlibrary.styles;

import android.graphics.Paint;
import android.util.Log;

import com.jibestream.jibestreamandroidlibrary.utils.ColorsMaterialDesign;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

/**
 * CssStyles library
 * Created by emmanuel on 15-05-21.
 * A library class to aggregate RenderStyle styles for easy access through the application
 */
public class CssStyles {
private static final String TAG = "CssStyles";
public final static String DEBUG = "debug";
public final static String defaultIdle = "defaultIdle";
public final static String defaultSelecation = "defaultSelection";
public final static String defaultHighlight = "defaultHighlight";
public final static String defaultBitmap = "defaultBitmap";
public final static String Obstacles = "Obstacles";
public final static String Escalators = "Escalators";
public final static String Elevators = "Elevators";
public final static String Stairs = "Stairs";
public final static String Units = "Units";
public final static String Parking_Lots = "Parking-Lots";
public final static String Interior_Parking_Lots = "Interior-ParkingLots";
public final static String Streets_Major = "Streets-Major";
public final static String Streets_Minor = "Streets-Minor";
public final static String Streets_SmallAlleys = "Streets-SmallAlleys";
public final static String Mall_Boundary = "Mall-Boundary";
public final static String Background = "Background";
public final static String Restrooms = "Restrooms";
public final static String Corridor = "Corridor-Indoor";
public final static String Kiosks = "Kiosks";
public final static String CustomArtLayer1 = "CustomArtLayer-1";
public final static String CustomArtLayer2 = "CustomArtLayer-2";
public final static String CustomArtLayer3 = "CustomArtLayer-3";
public final static String CustomArtLayer4 = "CustomArtLayer-4";
public final static String CustomArtLayer5 = "CustomArtLayer-5";
public final static String CustomArtLayer6 = "CustomArtLayer-6";
private Map<String, RenderStyle> RENDER_STYLES = new HashMap<>();

public CssStyles() {

  final RenderStyle styleDebug = new RenderStyle(Paint.Style.FILL_AND_STROKE);
  styleDebug.paintFill.setColor(ColorsMaterialDesign.RED7);
  styleDebug.paintFill.setAlpha(255 / 4);
  styleDebug.paintFill.setTextSize(50);
  styleDebug.paintStroke.setColor(ColorsMaterialDesign.RED9);
  styleDebug.setStrokeWidth(2);
  setRenderStyle(DEBUG, styleDebug, true);

  final RenderStyle styleIdle = new RenderStyle(Paint.Style.FILL);
  styleIdle.paintFill.setColor(ColorsMaterialDesign.GREY6);
  setDefaultIdle(styleIdle);

  final RenderStyle styleSelected = new RenderStyle(Paint.Style.FILL_AND_STROKE);
  styleSelected.setFillColor(ColorsMaterialDesign.RED6);
  styleSelected.setStrokeColor(ColorsMaterialDesign.GREY8);
  styleSelected.setStrokeWidth(2);
  setDefaultSelecation(styleSelected);

  final RenderStyle styleHighlight = new RenderStyle(Paint.Style.FILL);
  styleHighlight.setFillColor(ColorsMaterialDesign.RED3);
  setDefaultHighlight(styleHighlight);

  final RenderStyle styleBitmap = new RenderStyle(Paint.Style.FILL);
  styleBitmap.paintFill.setFilterBitmap(true);
  styleBitmap.paintFill.setAntiAlias(true);
  setDefaultBitmap(styleBitmap);
}

public void setRenderStyle(String name, RenderStyle renderStyle, boolean overideIfExists) {
  if (overideIfExists) {
    RenderStyle aRenderStyle = getRenderStyle(name);
    if (aRenderStyle != null) {
      aRenderStyle.set(renderStyle);
    } else {
      RENDER_STYLES.put(name, renderStyle);
    }
  } else {
    if (getRenderStyle(name) == null) {
      RENDER_STYLES.put(name, renderStyle);
    }
  }
}

/**
 * Utility fn list the keys for all entries
 */
public void listStyles() {
  final Set<String> strings = RENDER_STYLES.keySet();
  for (String name : strings) {
    Log.i(TAG, name);
  }
}

public RenderStyle getRenderStyle(String name) {
  return RENDER_STYLES.get(name);
}

public RenderStyle getDebug() {
  return getRenderStyle(DEBUG);
}

public void setDebug(RenderStyle renderStyle, boolean overideIfExists) {
  setRenderStyle(DEBUG, renderStyle, overideIfExists);
}

public RenderStyle getObstacles() {
  return getRenderStyle(Obstacles);
}

public void setObstacles(RenderStyle renderStyle, boolean overideIfExists) {
  setRenderStyle(Obstacles, renderStyle, overideIfExists);
}

public RenderStyle getEscalators() {
  return getRenderStyle(Escalators);
}

public void setEscalators(RenderStyle renderStyle, boolean overideIfExists) {
  setRenderStyle(Escalators, renderStyle, overideIfExists);
}

public RenderStyle getElevators() {
  return getRenderStyle(Elevators);
}

public void setElevators(RenderStyle renderStyle, boolean overideIfExists) {
  setRenderStyle(Elevators, renderStyle, overideIfExists);
}

public RenderStyle getStairs() {
  return getRenderStyle(Stairs);
}

public void setStairs(RenderStyle renderStyle, boolean overideIfExists) {
  setRenderStyle(Stairs, renderStyle, overideIfExists);
}

public RenderStyle getUnits() {
  return getRenderStyle(Units);
}

public void setUnits(RenderStyle renderStyle, boolean overideIfExists) {
  setRenderStyle(Units, renderStyle, overideIfExists);
}

public RenderStyle getParkingLots() {
  return getRenderStyle(Parking_Lots);
}

public void setParkingLots(RenderStyle renderStyle, boolean overideIfExists) {
  setRenderStyle(Parking_Lots, renderStyle, overideIfExists);
}

public RenderStyle getParkingLotsInterior() {
  return getRenderStyle(Interior_Parking_Lots);
}

public void setParkingLotsInterior(RenderStyle renderStyle, boolean overideIfExists) {
  setRenderStyle(Interior_Parking_Lots, renderStyle, overideIfExists);
}

public RenderStyle getStreetsMajor() {
  return getRenderStyle(Streets_Major);
}

public void setStreetsMajor(RenderStyle renderStyle, boolean overideIfExists) {
  setRenderStyle(Streets_Major, renderStyle, overideIfExists);
}

public RenderStyle getStreetsMinor() {
  return getRenderStyle(Streets_Minor);
}

public void setStreetsMinor(RenderStyle renderStyle, boolean overideIfExists) {
  setRenderStyle(Streets_Minor, renderStyle, overideIfExists);
}

public RenderStyle getStreetsSmallAlleys() {
  return getRenderStyle(Streets_SmallAlleys);
}

public void setStreetsSmallAlleys(RenderStyle renderStyle, boolean overideIfExists) {
  setRenderStyle(Streets_SmallAlleys, renderStyle, overideIfExists);
}

public RenderStyle getMallBoundary() {
  return getRenderStyle(Mall_Boundary);
}

public void setMallBoundary(RenderStyle renderStyle, boolean overideIfExists) {
  setRenderStyle(Mall_Boundary, renderStyle, overideIfExists);
}

public RenderStyle getBackground() {
  return getRenderStyle(Background);
}

public void setBackground(RenderStyle renderStyle, boolean overideIfExists) {
  setRenderStyle(Background, renderStyle, overideIfExists);
}

public RenderStyle getRestrooms() {
  return getRenderStyle(Restrooms);
}

public void setRestrooms(RenderStyle renderStyle, boolean overideIfExists) {
  setRenderStyle(Restrooms, renderStyle, overideIfExists);
}

public RenderStyle getCorridor() {
  return getRenderStyle(Corridor);
}

public void setCorridor(RenderStyle renderStyle, boolean overideIfExists) {
  setRenderStyle(Corridor, renderStyle, overideIfExists);
}

public RenderStyle getKiosks() {
  return getRenderStyle(Kiosks);
}

public void setKiosks(RenderStyle renderStyle, boolean overideIfExists) {
  setRenderStyle(Kiosks, renderStyle, overideIfExists);
}

public RenderStyle getCustomArtLayer1() {
  return getRenderStyle(CustomArtLayer1);
}

public void setCustomArtLayer1(RenderStyle renderStyle, boolean overideIfExists) {
  setRenderStyle(CustomArtLayer1, renderStyle, overideIfExists);
}

public RenderStyle getCustomArtLayer2() {
  return getRenderStyle(CustomArtLayer2);
}

public void setCustomArtLayer2(RenderStyle renderStyle, boolean overideIfExists) {
  setRenderStyle(CustomArtLayer2, renderStyle, overideIfExists);
}

public RenderStyle getCustomArtLayer3() {
  return getRenderStyle(CustomArtLayer3);
}

public void setCustomArtLayer3(RenderStyle renderStyle, boolean overideIfExists) {
  setRenderStyle(CustomArtLayer3, renderStyle, overideIfExists);
}

public RenderStyle getCustomArtLayer4() {
  return getRenderStyle(CustomArtLayer4);
}

public void setCustomArtLayer4(RenderStyle renderStyle, boolean overideIfExists) {
  setRenderStyle(CustomArtLayer4, renderStyle, overideIfExists);
}

public RenderStyle getCustomArtLayer5() {
  return getRenderStyle(CustomArtLayer5);
}

public void setCustomArtLayer5(RenderStyle renderStyle, boolean overideIfExists) {
  setRenderStyle(CustomArtLayer5, renderStyle, overideIfExists);
}

public RenderStyle getCustomArtLayer6() {
  return getRenderStyle(CustomArtLayer6);
}

public void setCustomArtLayer6(RenderStyle renderStyle, boolean overideIfExists) {
  setRenderStyle(CustomArtLayer6, renderStyle, overideIfExists);
}

public RenderStyle getDefaultIdle() {
  return getRenderStyle(defaultIdle);
}

public void setDefaultIdle(RenderStyle renderStyle) {
  setRenderStyle(defaultIdle, renderStyle, true);
}

public RenderStyle getDefaultSelecation() {
  return getRenderStyle(defaultSelecation);
}

public void setDefaultSelecation(RenderStyle renderStyle) {
  setRenderStyle(defaultSelecation, renderStyle, true);
}

public RenderStyle getDefaultHighlight() {
  return getRenderStyle(defaultHighlight);
}

public void setDefaultHighlight(RenderStyle renderStyle) {
  setRenderStyle(defaultHighlight, renderStyle, true);
}

public RenderStyle getDefaultBitmap() {
  return getRenderStyle(defaultBitmap);
}

public void setDefaultBitmap(RenderStyle renderStyle) {
  setRenderStyle(defaultBitmap, renderStyle, true);
}

}