package com.jibestream.jibestreamandroidlibrary.shapes;

import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.RectF;

import com.jibestream.jibestreamandroidlibrary.main.IElementProxyDirty;
import com.jibestream.jibestreamandroidlibrary.utils.ColorsMaterialDesign;
import com.jibestream.jibestreamandroidlibrary.utils.Ninegrid;

/**
 * Bitmap shape abstraction for easy canvas calls
 * Created by emmanuel on 15-05-13.
 */
public class Image implements IShape {
private Bitmap bitmap;
private int width = 100;
private int height = 100;
private Ninegrid ninegrid = new Ninegrid(Ninegrid.MiddleMiddle);
private final RectF bbox = new RectF();
private float offsetX;
private float offsetY;
private IElementProxyDirty elementProxyDirty;

public Image() {
  this(null);
}

public Image(Bitmap bitmap) {
  this(bitmap, 24, 24);
}

public Image(int width, int height) {
  this(null, width, height, null);
}

public Image(Bitmap bitmap, int width, int height) {
  this(bitmap, width, height, null);
}

public Image(Bitmap bitmap, int width, int height, Ninegrid ninegrid) {
  super();
  if (width > 0) this.width = width;
  if (height > 0) this.height = height;
  if (bitmap != null) {
    this.bitmap = bitmap;
  } else {
    this.bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
    this.bitmap.eraseColor(ColorsMaterialDesign.getRandomColor());
  }
  if (ninegrid != null) this.ninegrid = ninegrid;
  calc();
}

@Override
public void onDraw(Canvas canvas, Paint paint) {
  canvas.drawBitmap(bitmap, null, bbox, paint);
}


private void calc() {
  bbox.set(0, 0, width, height);
  bbox.offset(offsetX, offsetY);
  bbox.offset(width * -ninegrid.x, height * -ninegrid.y);
  if (elementProxyDirty != null) elementProxyDirty.setDirtyShape(true);
}

@Override
public void setElementProxyDirty(IElementProxyDirty elementProxyDirty) {
  this.elementProxyDirty = elementProxyDirty;
}

@Override
public String toString() {
  return getClass().getName() + " width: " + width + " height: " + height;
}

public synchronized Bitmap getBitmap() {
  return bitmap;
}

public synchronized void setBitmap(Bitmap bitmap) {
  if (bitmap == null) return;
  this.bitmap = bitmap;
  calc();
}

public synchronized Ninegrid getNinegrid() {
  return ninegrid;
}

public synchronized void setNinegrid(Ninegrid ninegrid) {
  this.ninegrid = ninegrid;
  calc();
}

public synchronized int getWidth() {
  return width;
}

public synchronized void setWidth(int width) {
  this.width = width;
  calc();
}

public synchronized int getHeight() {
  return height;
}

public synchronized void setHeight(int height) {
  this.height = height;
  calc();
}

@Override
public void setBBox(RectF bbox) {
  synchronized (this.bbox) {
    this.bbox.set(bbox);
  }
}

@Override
public synchronized RectF getBBox() {
  synchronized (bbox) {
    return bbox;
  }
}

@Override
public synchronized float getOffsetX() {
  return offsetX;
}

@Override
public synchronized void setOffsetX(float offsetX) {
  this.offsetX = offsetX;
  calc();
}

@Override
public synchronized float getOffsetY() {
  return offsetY;
}

@Override
public synchronized void setOffsetY(float offsetY) {
  this.offsetY = offsetY;
  calc();
}
}
