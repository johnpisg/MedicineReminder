package com.jibestream.jibestreamandroidlibrary.shapes;

import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.RectF;

import java.util.ArrayList;

/**
 * Polygon shape abstraction for easy canvas calls
 * Created by emmanuel on 15-05-13.
 */
public class Polygon extends Shape {
private android.graphics.Path path = new Path();
//public float[] pts;

public Polygon() {
  this(null);
}

public Polygon(ArrayList<Float> points) {
  super();
  if (points != null) setPathFromPoints(points);
}

public synchronized Path getPath() {
  return path;
}

public synchronized void setPath(Path path) {
  this.path = path;
  calc();
}

public synchronized void setPathFromPoints(ArrayList<Float> points) {
  path.reset();
  path.moveTo(points.get(0), points.get(1));
  for (int i = 2; i < points.size(); i += 2) {
    float x = points.get(i);
    float y = points.get(i + 1);
    path.lineTo(x, y);
  }
  path.close();
  calc();
}

public synchronized void setPathFromPoints(float[] points) {
  path.reset();
  path.moveTo(points[0], points[1]);
  for (int i = 2; i < points.length; i += 2) {
    float x = points[i];
    float y = points[i + 1];
    path.lineTo(x, y);
  }
  path.close();
  calc();
}

private void calc() {
  final RectF bbox = new RectF();
  path.computeBounds(bbox, true);
  setBBox(bbox);
}

@Override
public String toString() {
  return getClass().getName() + " path: " + path;
}

@Override
public void onDraw(Canvas canvas, Paint paint) {
  canvas.drawPath(path, paint);
}
}
