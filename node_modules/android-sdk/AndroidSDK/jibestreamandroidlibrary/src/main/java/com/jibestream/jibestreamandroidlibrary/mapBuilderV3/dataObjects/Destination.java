package com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects;

import android.graphics.Bitmap;
import android.os.Parcel;
import android.os.Parcelable;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Information holder for Destination
 */
public class Destination implements Parcelable {
/**
 * Internal ID of a destination
 */
public int id;
/**
 * Name of a destination
 */
public String name;
/**
 * Description of a destination
 */
public String description;
/**
 * Additional description of a destination
 */
public String descriptionMore;
/**
 * Keywords of a destination
 */
public String keywords;
/**
 * List of categories(description/name) this destination is associated with
 */
public String[] category;
/**
 * List of categories IDs this destination is associated with
 */
public int[] categoryId;
/**
 * Client designated id of a destination
 */
public String clientId;
/**
 * Helper image of a destination
 */
public String helperImage;
/**
 * QR image of a destination
 */
public String qrCodeImage;
/**
 * Field used internally
 */
public String ck;
/**
 * Project ID of a destination
 */
public int projectId;
/**
 * The coordinates of a destination
 */
public GeoCoordinate geoCoordinate;
/**
 * The Sponsored Rating value of a destination
 */
public int sponsoredRating;
/**
 * Opening date associated with a destination
 */
public long openingDate;
/**
 * Operating status (open,closed) of a destination
 */
public int operatingStatus = 1;
/**
 * Closing date associated with a destination
 */
public long closingDate;
/**
 * Level field
 */
public String level;
/**
 * An array of DestinationProximity objects
 */
public DestinationProximity[] destinationProximities;
public String unitNumber;
public int destinationTypeId;
public String destinationType;
public List<Map<Integer, String>> primaryCategories;
public List<Map<Integer, String>> secondaryCategories;
public Map<Integer, String> displayCategories;
public Map<Integer, String> unitType;

//Populated from framework
/**
 * the actula bitmap of the helperImage link
 */
//public Bitmap helperImageBitmap;


@Override
public int describeContents() {
  return 0;
}

@Override
public void writeToParcel(Parcel dest, int flags) {
  dest.writeInt(this.id);
  dest.writeString(this.name);
  dest.writeString(this.description);
  dest.writeString(this.descriptionMore);
  dest.writeString(this.keywords);
  dest.writeStringArray(this.category);
  dest.writeIntArray(this.categoryId);
  dest.writeString(this.clientId);
  dest.writeString(this.helperImage);
  dest.writeString(this.qrCodeImage);
  dest.writeString(this.ck);
  dest.writeInt(this.projectId);
  dest.writeParcelable(this.geoCoordinate, 0);
  dest.writeInt(this.sponsoredRating);
  dest.writeLong(this.openingDate);
  dest.writeInt(this.operatingStatus);
  dest.writeLong(this.closingDate);
  dest.writeString(this.level);
  dest.writeParcelableArray(this.destinationProximities, 0);
  dest.writeString(this.unitNumber);
  dest.writeInt(this.destinationTypeId);
  dest.writeString(this.destinationType);
  dest.writeList(this.primaryCategories);
  dest.writeList(this.secondaryCategories);
//  dest.writeParcelable(this.helperImageBitmap, 0);
  if (displayCategories == null || unitType == null) {
    dest.writeInt(0);
  } else {
    dest.writeInt(displayCategories.size());
    for (Map.Entry<Integer, String> entry : displayCategories.entrySet()) {
      dest.writeInt(entry.getKey());
      dest.writeString(entry.getValue());
    }
    dest.writeInt(unitType.size());
    for (Map.Entry<Integer, String> entry : unitType.entrySet()) {
      dest.writeInt(entry.getKey());
      dest.writeString(entry.getValue());
    }
  }
}

public Destination() {
}

protected Destination(Parcel in) {
  this.id = in.readInt();
  this.name = in.readString();
  this.description = in.readString();
  this.descriptionMore = in.readString();
  this.keywords = in.readString();
  this.category = in.createStringArray();
  this.categoryId = in.createIntArray();
  this.clientId = in.readString();
  this.helperImage = in.readString();
  this.qrCodeImage = in.readString();
  this.ck = in.readString();
  this.projectId = in.readInt();
  this.geoCoordinate = in.readParcelable(GeoCoordinate.class.getClassLoader());
  this.sponsoredRating = in.readInt();
  this.openingDate = in.readLong();
  this.operatingStatus = in.readInt();
  this.closingDate = in.readLong();
  this.level = in.readString();
  this.destinationProximities = (DestinationProximity[]) in.readParcelableArray(DestinationProximity.class.getClassLoader());
  this.unitNumber = in.readString();
  this.destinationTypeId = in.readInt();
  this.destinationType = in.readString();
  this.primaryCategories = new ArrayList<>();
  in.readList(this.primaryCategories, List.class.getClassLoader());
  this.secondaryCategories = new ArrayList<>();
  in.readList(this.secondaryCategories, List.class.getClassLoader());
//  this.helperImageBitmap = in.readParcelable(Bitmap.class.getClassLoader());
  int size = in.readInt();
  if (size != 0) {
    for (int i = 0; i < size; i++) {
      int key = in.readInt();
      String value = in.readString();
      displayCategories.put(key, value);
    }
    int size2 = in.readInt();
    for (int i = 0; i < size2; i++) {
      int key = in.readInt();
      String value = in.readString();
      unitType.put(key, value);
    }
  }
}

public static final Parcelable.Creator<Destination> CREATOR = new Parcelable.Creator<Destination>() {
  public Destination createFromParcel(Parcel source) {
    return new Destination(source);
  }

  public Destination[] newArray(int size) {
    return new Destination[size];
  }
};
}
