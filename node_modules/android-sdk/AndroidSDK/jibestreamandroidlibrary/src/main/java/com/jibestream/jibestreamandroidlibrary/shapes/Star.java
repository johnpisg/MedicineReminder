package com.jibestream.jibestreamandroidlibrary.shapes;

import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.RectF;

import com.jibestream.jibestreamandroidlibrary.math.Vec;

/**
 * Star shape abstraction for easy canvas calls
 * Created by emmanuel on 15-08-25.
 */
public class Star extends Shape {

private float radius;
private float radiusInner;
private int rays;
private final Path path = new Path();

public Star() {
  this(10f, 6f, 5);
}

public Star(float radius, float radiusInner, int rays) {
  this.radius = radius;
  this.radiusInner = radiusInner;
  this.rays = rays;
  calc();
}

private void calc() {
  Vec vec = new Vec();
  float stepRadian = (float) (Math.PI * 2f) / rays;
  float stepHalf = stepRadian / 2f;
  vec.setFromPolar(-stepHalf, radiusInner);
  path.moveTo(vec.getX(), vec.getY());
  for (int i = 0; i < rays; i++) {
    vec.setFromPolar(stepRadian * i, radius);
    path.lineTo(vec.getX(), vec.getY());
    vec.setFromPolar(stepRadian * i + stepHalf, radiusInner);
    path.lineTo(vec.getX(), vec.getY());
  }
  path.close();
  final RectF bbox = new RectF();
  path.computeBounds(bbox, true);
  setBBox(bbox);
}

@Override
public void onDraw(Canvas canvas, Paint paint) {
  canvas.drawPath(path, paint);
}

public synchronized float getRadius() {
  return radius;
}

public synchronized void setRadius(float radius) {
  this.radius = radius;
  calc();
}

public synchronized float getRadiusInner() {
  return radiusInner;
}

public synchronized void setRadiusInner(float radiusInner) {
  this.radiusInner = radiusInner;
  calc();
}

public synchronized int getRays() {
  return rays;
}

public synchronized void setRays(int rays) {
  this.rays = rays;
  calc();
}
}
