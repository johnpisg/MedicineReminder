package com.jibestream.jibestreamandroidlibrary.shapes;

import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.RectF;

import com.jibestream.jibestreamandroidlibrary.main.IElementProxyDirty;

import java.util.ArrayList;

/**
 * Created by emmanuel on 15-07-29.
 */
public class MultiShape extends Shape {

private ArrayList<IShape> shapes;
private IShape[] shapesToIterateOver;

public MultiShape() {
  shapes = new ArrayList<>();
}

@Override
public synchronized void onDraw(Canvas canvas, Paint paint) {
  if (shapesToIterateOver == null) return;
  final int length = shapesToIterateOver.length;
  for (int i = 0; i < length; i++) {
    final IShape iShape = shapesToIterateOver[i];
    if (iShape == null) continue;
    final float iShapeOffsetX = iShape.getOffsetX();
    final float iShapeOffsetY = iShape.getOffsetY();
    final boolean translateCanvas = iShapeOffsetX != 0 || iShapeOffsetY != 0;
    if (translateCanvas) {
      canvas.save();
      canvas.translate(iShapeOffsetX, iShapeOffsetY);
    }
    iShape.onDraw(canvas, paint);
    if (translateCanvas) {
      canvas.restore();
    }
  }
}

@Override
public void setElementProxyDirty(IElementProxyDirty elementProxyDirty) {
  final int size = shapes.size();
  for (int i = 0; i < size; i++) {
    IShape iShape = shapes.get(i);
    iShape.setElementProxyDirty(getElementProxyDirty());
  }
  super.setElementProxyDirty(elementProxyDirty);
}

private synchronized void calc() {
  final RectF bbox = new RectF();
  final int size = shapes.size();
  for (int i = 0; i < size; i++) {
    IShape iShape = shapes.get(i);
    final RectF iShapeBBox = iShape.getBBox();
    bbox.union(iShapeBBox);
    iShape.setElementProxyDirty(getElementProxyDirty());
  }
  setBBox(bbox);
  //
  shapesToIterateOver = shapes.toArray(new IShape[shapes.size()]);
}

/**
 * return a shallow clone of the Shapes array
 * @return
 */
public synchronized IShape[] getShapes(){
  return shapesToIterateOver.clone();
}

public synchronized void addShape(IShape shape) {
  shapes.add(shape);
  calc();
}

public synchronized void removeShape(IShape shape) {
  shapes.remove(shape);
  calc();
}

public synchronized void clearShapes() {
  shapes.clear();
  calc();
}

public synchronized void addAllShapes(ArrayList<IShape> shapes) {
  this.shapes.addAll(shapes);
  calc();
}

}
