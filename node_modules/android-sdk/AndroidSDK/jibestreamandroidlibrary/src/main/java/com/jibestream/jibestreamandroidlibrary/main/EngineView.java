package com.jibestream.jibestreamandroidlibrary.main;

import android.content.Context;
import android.content.Intent;
import android.graphics.Matrix;
import android.support.v4.content.LocalBroadcastManager;
import android.support.v4.view.GestureDetectorCompat;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.ScaleGestureDetector;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.WindowManager;

import com.jibestream.jibestreamandroidlibrary.gestureListeners.RotationGestureDetector;

/**
 * Created by emmanuel on 15-05-05.
 */
public class EngineView extends SurfaceView implements
    SurfaceHolder.Callback,
    ScaleGestureDetector.OnScaleGestureListener,
    RotationGestureDetector.OnRotationGestureListener {
private static final String TAG = "EngineView";
public static final String SURFACE_CREATED = "com.jibestream.engineview.surface_created";
public static final String SURFACE_DESTROYED = "com.jibestream.engineview.surface_destroyed";
public static final String SURFACE_CHANGED = "com.jibestream.engineview.surface_changed";
public static final String ON_TOUCH_EVENT = "com.jibestream.engineview.on_touch_event";
public static final String ON_ROTATION = "com.jibestream.engineview.on_rotation";
public static final String ON_SCALE = "com.jibestream.engineview.on_scale";
public static final String ON_DOWN = "com.jibestream.engineview.on_down";
public static final String ON_SINGLE_TAP_UP = "com.jibestream.engineview.on_single_tap_up";
public static final String ON_SINGLE_TAP_CONFIRMED = "com.jibestream.engineview.on_single_tap_confirmed";
public static final String ON_DOUBLE_TAP = "com.jibestream.engineview.on_double_tap";
public static final String ON_SCROLL = "com.jibestream.engineview.on_scroll";
public static final String ON_LONGPRESS = "com.jibestream.engineview.on_longpress";
public static final String ON_FLING = "com.jibestream.engineview.on_fling";
public final int id = GUID.get();
public static final float DPI_560 = 560f;
public static final float DPI_480 = 480f;
public static final float DPI_400 = 400f;
public static final float DPI_320 = 320f;
public static final float DPI_240 = 240f;
public static float DPI = DPI_320;
private GestureDetectorCompat gestureDetectorCompat;
private ScaleGestureDetector scaleGestureDetector;
private RotationGestureDetector rotationGestureDetector;
public LocalBroadcastManager localBroadcastManager;
private float scaleFactor;
public int dpi;
public Matrix matrixDPI = new Matrix();
private int outW, outH;

public EngineView(Context context) {
  super(context);
  init(context.getApplicationContext());
}

public EngineView(Context context, AttributeSet attributeSet) {
  super(context, attributeSet);
  init(context.getApplicationContext());
}

private void init(Context context) {
  if (isInEditMode()) return;
  getHolder().addCallback(this);
  //
  DisplayMetrics metrics = new DisplayMetrics();
  WindowManager windowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
  windowManager.getDefaultDisplay().getMetrics(metrics);
  Log.i(TAG, "density: " + metrics.density);
  Log.i(TAG, "densityDpi: " + metrics.densityDpi);
  Log.i(TAG, "scaledDensity: " + metrics.scaledDensity);
  Log.i(TAG, "xdpi: " + metrics.xdpi);
  Log.i(TAG, "ydpi: " + metrics.ydpi);
  dpi = metrics.densityDpi;
  scaleFactor = DPI / dpi;
  //
  scaleGestureDetector = new ScaleGestureDetector(context, this);
  rotationGestureDetector = new RotationGestureDetector(this);
  gestureDetectorCompat = new GestureDetectorCompat(context, new MyGestureListener());
  //
  localBroadcastManager = LocalBroadcastManager.getInstance(context);
}

public int width() {
  return outW;
}

public int height() {
  return outH;
}

/**
 * return the ratio of screen DPIs and hardware scalar DPIs
 * @return
 */
public float getScaleFactor() {
  return scaleFactor;
}

//1 - rot1
@Override
protected void onSizeChanged(int w, int h, int oldw, int oldh) {
  super.onSizeChanged(w, h, oldw, oldh);
  outW = (int) (w * scaleFactor);
  outH = (int) (h * scaleFactor);
  matrixDPI.reset();
  matrixDPI.setScale(scaleFactor, scaleFactor);
}

//2
@Override
public void surfaceCreated(SurfaceHolder holder) {
  Log.i(TAG, ">>> surface created");
  Intent intent = new Intent(SURFACE_CREATED);
  intent.putExtra("id", id);
  localBroadcastManager.sendBroadcast(intent);
}

@Override
public void surfaceDestroyed(SurfaceHolder holder) {
  Log.i(TAG, "surface destroyed");
  Intent intent = new Intent(SURFACE_DESTROYED);
  intent.putExtra("id", id);
  localBroadcastManager.sendBroadcast(intent);
}

//3-4 rot23
@Override
public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
  if ((outW != width) || (outH != height)) {
    holder.setFixedSize(outW, outH);
    return;
  }
  Log.i(TAG, "surface change, w: " + width + " h: " + height);
  Intent intent = new Intent(SURFACE_CHANGED);
  intent.putExtra("id", id);
  intent.putExtra("width", width);
  intent.putExtra("height", height);
  localBroadcastManager.sendBroadcast(intent);
}


////////////////////////////////////////////////////////////////////////////////////
///////////////////////             TOUCH                 //////////////////////////
////////////////////////////////////////////////////////////////////////////////////
@Override
public boolean onTouchEvent(MotionEvent motionEvent) {
  //
  motionEvent.transform(matrixDPI);
  //
  Intent intent = new Intent(ON_TOUCH_EVENT);
  intent.putExtra("id", id);
  intent.putExtra("motionEvent", motionEvent);
  if (motionEvent.getAction() == MotionEvent.ACTION_DOWN ||
      motionEvent.getAction() == MotionEvent.ACTION_MOVE ||
      motionEvent.getAction() == MotionEvent.ACTION_SCROLL
      ) {
    intent.putExtra("IsUserInteracting", true);
  } else if (motionEvent.getAction() == MotionEvent.ACTION_UP) {
    intent.putExtra("IsUserInteracting", false);
  }
  localBroadcastManager.sendBroadcast(intent);
  //
  gestureDetectorCompat.onTouchEvent(motionEvent);
  rotationGestureDetector.onTouchEvent(motionEvent);
  scaleGestureDetector.onTouchEvent(motionEvent);

  return true;
}

////////////////////////////////////////////////////////////////////////////////////
/////////////////           RotationGestureDetector         ////////////////////////
////////////////////////////////////////////////////////////////////////////////////
@Override
public boolean onRotation(RotationGestureDetector rotationDetector, float x, float y) {
  float rotation = rotationDetector.getAngle();
//  Log.i(TAG, " rot " + rotation);
  if (Math.abs(rotation) < 0.0625f) {
//    Log.i(TAG, "Bypassing rot " + rotation);
    return false;
  }
  Intent intent = new Intent(ON_ROTATION);
  intent.putExtra("id", id);
  intent.putExtra("rotation", rotation);
  intent.putExtra("x", x);
  intent.putExtra("y", y);
  localBroadcastManager.sendBroadcast(intent);
  return true;
}

////////////////////////////////////////////////////////////////////////////////////
///////////////////              ScaleDetectors      ///////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
@Override
public boolean onScale(ScaleGestureDetector scaleGestureDetector) {
  float scale = scaleGestureDetector.getScaleFactor();
  if (Math.abs(1f - scale) < 0.00025f) {
//    Log.i(TAG, "Bypassing scale " + scale);
    return false;
  }
  float focusX = scaleGestureDetector.getFocusX();
  float focusY = scaleGestureDetector.getFocusY();
  Intent intent = new Intent(ON_SCALE);
  intent.putExtra("id", id);
  intent.putExtra("scale", scale);
  intent.putExtra("focusX", focusX);
  intent.putExtra("focusY", focusY);
  localBroadcastManager.sendBroadcast(intent);
  return true;
}

@Override
public boolean onScaleBegin(ScaleGestureDetector scaleGestureDetector) {
  return true;
}

@Override
public void onScaleEnd(ScaleGestureDetector scaleGestureDetector) {
}

private class MyGestureListener extends GestureDetector.SimpleOnGestureListener {

  @Override
  public boolean onDown(MotionEvent motionEvent) {
    Intent intent = new Intent(ON_DOWN);
    intent.putExtra("id", id);
    intent.putExtra("motionEvent", motionEvent);
    localBroadcastManager.sendBroadcast(intent);
    return true;
  } // must return true !

  @Override
  public boolean onSingleTapUp(MotionEvent motionEvent) {
    Intent intent = new Intent(ON_SINGLE_TAP_UP);
    intent.putExtra("id", id);
    intent.putExtra("motionEvent", motionEvent);
    localBroadcastManager.sendBroadcast(intent);
    return true;
  }

  @Override
  public boolean onSingleTapConfirmed(MotionEvent motionEvent) {
    Intent intent = new Intent(ON_SINGLE_TAP_CONFIRMED);
    intent.putExtra("id", id);
    intent.putExtra("motionEvent", motionEvent);
    localBroadcastManager.sendBroadcast(intent);
    return true;
  }

  @Override
  public boolean onDoubleTap(MotionEvent motionEvent) {
    Intent intent = new Intent(ON_DOUBLE_TAP);
    intent.putExtra("id", id);
    intent.putExtra("motionEvent", motionEvent);
    localBroadcastManager.sendBroadcast(intent);
    return true;
  }

  @Override
  public boolean onScroll(MotionEvent motionEvent, MotionEvent motionEvent2, float distanceX, float distanceY) {
    Intent intent = new Intent(ON_SCROLL);
    intent.putExtra("id", id);
    intent.putExtra("motionEvent", motionEvent);
    intent.putExtra("motionEvent2", motionEvent2);
    intent.putExtra("distanceX", distanceX);
    intent.putExtra("distanceY", distanceY);
    localBroadcastManager.sendBroadcast(intent);
    return true;
  }

  @Override
  public void onLongPress(MotionEvent motionEvent) {
    Intent intent = new Intent(ON_LONGPRESS);
    intent.putExtra("id", id);
    intent.putExtra("motionEvent", motionEvent);
    localBroadcastManager.sendBroadcast(intent);
  }

  @Override
  public boolean onFling(MotionEvent motionEvent, MotionEvent motionEvent2, float velocityX, float velocityY) {
    Intent intent = new Intent(ON_FLING);
    intent.putExtra("id", id);
    intent.putExtra("motionEvent", motionEvent);
    intent.putExtra("motionEvent2", motionEvent2);
    intent.putExtra("velocityX", velocityX);
    intent.putExtra("velocityY", velocityY);
    localBroadcastManager.sendBroadcast(intent);
    return true;
  }
}

}


