package com.jibestream.jibestreamandroidlibrary.main;

import android.os.Parcel;
import android.os.Parcelable;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

import com.google.gson.Gson;
import com.jibestream.jibestreamandroidlibrary.http.BasicAuthentication;
import com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.Amenity;
import com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.Category;
import com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.Destination;
import com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.Device;
import com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.MapFull;
import com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.Path;
import com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.PathType;
import com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.Waypoint;
import com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.Zone;

/**
 * Created by emmanuel on 2015-11-09.
 * The wire objects for a venue.
 */
public class VenueData implements Parcelable {
private static final String TAG = "VenueData";
public int counterReq;
public int counterTotalReq;
public String url;
/**
 * Project ID synonym to
 */
public int projectID;
public int deviceID = -1;
public String timestamp;
public BasicAuthentication basicAuthentication;
/**
 * The collection of {@link Destination} this venue has.
 */
public Destination[] destinations;
/**
 * The collection of {@link Category} this venue has.
 */
public Category[] categories;
/**
 * The collection of {@link MapFull} this venue has.
 */
public MapFull[] maps;
/**
 * All {@link Device} of the venue.
 */
public Device[] devices;
/**
 * All {@link Path} of the venue.
 */
public Path[] paths;
/**
 * All  {@link Waypoint} of the venue.
 */
public Waypoint[] waypoints;
/**
 * The {@link PathType} that exist on the venue. Aka mover types
 */
public PathType[] pathTypes;
/**
 * All {@link Amenity} of the venue.
 */
public Amenity[] amenities;
/**
 * All {@link Zone} of the venue.
 */
public Zone[] zones;

public static VenueData BuildFromJson(String json) {
  Gson gson = new Gson();
  VenueData venueData = gson.fromJson(json, VenueData.class);
  return venueData;
}

public VenueData(@NonNull String url, int projectID) {
  this(url, projectID, null);
}

public VenueData(@NonNull String url, int projectID, @Nullable BasicAuthentication basicAuthentication) {
  this.url = url;
  this.projectID = projectID;
  this.basicAuthentication = basicAuthentication;
}

public String toJson() {
  String json = new Gson().toJson(this);
  return json;
}

public void populateFromJson(String json) {
  VenueData venueData = new Gson().fromJson(json, VenueData.class);
  deviceID = venueData.deviceID;
  timestamp = venueData.timestamp;
  basicAuthentication = venueData.basicAuthentication;
  destinations = venueData.destinations;
  categories = venueData.categories;
  maps = venueData.maps;
  devices = venueData.devices;
  paths = venueData.paths;
  waypoints = venueData.waypoints;
  pathTypes = venueData.pathTypes;
  amenities = venueData.amenities;
  zones = venueData.zones;
}

@Override
public int describeContents() {
  return 0;
}

@Override
public void writeToParcel(Parcel dest, int flags) {
  dest.writeParcelableArray(this.destinations, 0);
  dest.writeParcelableArray(this.categories, 0);
  dest.writeParcelableArray(this.maps, 0);
  dest.writeParcelableArray(this.devices, 0);
  dest.writeParcelableArray(this.paths, 0);
  dest.writeParcelableArray(this.waypoints, 0);
  dest.writeParcelableArray(this.pathTypes, 0);
  dest.writeParcelableArray(this.amenities, 0);
  dest.writeParcelableArray(this.zones, 0);
  dest.writeString(this.url);
  dest.writeInt(this.projectID);
}

protected VenueData(Parcel in) {
  this.destinations = (Destination[]) in.readParcelableArray(Destination.class.getClassLoader());
  this.categories = (Category[]) in.readParcelableArray(Category.class.getClassLoader());
  this.maps = (MapFull[]) in.readParcelableArray(MapFull.class.getClassLoader());
  this.devices = (Device[]) in.readParcelableArray(Device.class.getClassLoader());
  this.paths = (Path[]) in.readParcelableArray(Path.class.getClassLoader());
  this.waypoints = (Waypoint[]) in.readParcelableArray(Waypoint.class.getClassLoader());
  this.pathTypes = (PathType[]) in.readParcelableArray(PathType.class.getClassLoader());
  this.amenities = (Amenity[]) in.readParcelableArray(Amenity.class.getClassLoader());
  this.zones = (Zone[]) in.readParcelableArray(Zone.class.getClassLoader());
  this.url = in.readString();
  this.projectID = in.readInt();
}

public static final Parcelable.Creator<VenueData> CREATOR = new Parcelable.Creator<VenueData>() {
  public VenueData createFromParcel(Parcel source) {
    return new VenueData(source);
  }

  public VenueData[] newArray(int size) {
    return new VenueData[size];
  }
};

}
