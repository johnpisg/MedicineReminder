package com.jibestream.jibestreamandroidlibrary.elements;

import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.RectF;

import com.jibestream.jibestreamandroidlibrary.shapes.IconShape;
import com.jibestream.jibestreamandroidlibrary.shapes.MultiShape;
import com.jibestream.jibestreamandroidlibrary.styles.IRenderStyleIcon;
import com.jibestream.jibestreamandroidlibrary.styles.RenderStyleIcon;
import com.jibestream.jibestreamandroidlibrary.utils.ColorsMaterialDesign;

/**
 * Created by emmanuel on 2015-10-22.
 */
public class ElementIcon extends Element implements IRenderStyleIcon {
public volatile RenderStyleIcon renderStyleIconIdle = null;
public volatile RenderStyleIcon renderStyleIconSelected = null;
public volatile RenderStyleIcon renderStyleIconHighlighted = null;

public ElementIcon() {
  renderStyleIconIdle = new RenderStyleIcon();
  renderStyleIconIdle.renderStyleBG.paintFill.setColor(ColorsMaterialDesign.GREY9);
  renderStyleIconIdle.renderStyleMG.paintFill.setColor(ColorsMaterialDesign.GREY6);
  renderStyleIconIdle.renderStyleFG.paintFill.setColor(ColorsMaterialDesign.GREY3);
//  setBoundingBoxVisible(true);
}

@Override
public void onRender(final Canvas canvas, final Paint touchPaint) {
  final IconShape iconShape = (IconShape) getShape();
  if (iconShape == null) return;
  final float elementOffsetX = getOffsetX();
  final float elementOffsetY = getOffsetY();
  final float iShapeOffsetX = iconShape.getOffsetX();
  final float iShapeOffsetY = iconShape.getOffsetY();
  final boolean translateCanvas = elementOffsetX != 0 || elementOffsetY != 0 || iShapeOffsetX != 0 || iShapeOffsetY != 0;
  if (translateCanvas) {
    canvas.save();
    canvas.translate(elementOffsetX + iShapeOffsetX, elementOffsetY + iShapeOffsetY);
  }
  //
  if (touchPaint != null) {
    iconShape.onDraw(canvas, touchPaint, IconShape.TOUCH);
  } else {
    if (renderStyleIconIdle != null) {
      if (renderStyleIconIdle.renderStyleBG != null) {
        if (renderStyleIconIdle.renderStyleBG.paintFill != null)
          iconShape.onDraw(canvas, renderStyleIconIdle.renderStyleBG.paintFill, IconShape.BACKGROUND);
        if (renderStyleIconIdle.renderStyleBG.paintStroke != null)
          iconShape.onDraw(canvas, renderStyleIconIdle.renderStyleBG.paintStroke, IconShape.BACKGROUND);
      }
      if (renderStyleIconIdle.renderStyleMG != null) {
        if (renderStyleIconIdle.renderStyleMG.paintFill != null)
          iconShape.onDraw(canvas, renderStyleIconIdle.renderStyleMG.paintFill, IconShape.MIDDLEGROUND);
        if (renderStyleIconIdle.renderStyleMG.paintStroke != null)
          iconShape.onDraw(canvas, renderStyleIconIdle.renderStyleMG.paintStroke, IconShape.MIDDLEGROUND);
      }
      if (renderStyleIconIdle.renderStyleFG != null) {
        if (renderStyleIconIdle.renderStyleFG.paintFill != null)
          iconShape.onDraw(canvas, renderStyleIconIdle.renderStyleFG.paintFill, IconShape.FOREGROUND);
        if (renderStyleIconIdle.renderStyleFG.paintStroke != null)
          iconShape.onDraw(canvas, renderStyleIconIdle.renderStyleFG.paintStroke, IconShape.FOREGROUND);
      }
    }
    if (isHighlightable() && isHighlightState() && renderStyleIconHighlighted != null) {
      if (renderStyleIconHighlighted.renderStyleBG != null) {
        if (renderStyleIconHighlighted.renderStyleBG.paintFill != null)
          iconShape.onDraw(canvas, renderStyleIconHighlighted.renderStyleBG.paintFill, IconShape.BACKGROUND);
        if (renderStyleIconHighlighted.renderStyleBG.paintStroke != null)
          iconShape.onDraw(canvas, renderStyleIconHighlighted.renderStyleBG.paintStroke, IconShape.BACKGROUND);
      }
      if (renderStyleIconHighlighted.renderStyleMG != null) {
        if (renderStyleIconHighlighted.renderStyleMG.paintFill != null)
          iconShape.onDraw(canvas, renderStyleIconHighlighted.renderStyleMG.paintFill, IconShape.MIDDLEGROUND);
        if (renderStyleIconHighlighted.renderStyleMG.paintStroke != null)
          iconShape.onDraw(canvas, renderStyleIconHighlighted.renderStyleMG.paintStroke, IconShape.MIDDLEGROUND);
      }
      if (renderStyleIconHighlighted.renderStyleFG != null) {
        if (renderStyleIconHighlighted.renderStyleFG.paintFill != null)
          iconShape.onDraw(canvas, renderStyleIconHighlighted.renderStyleFG.paintFill, IconShape.FOREGROUND);
        if (renderStyleIconHighlighted.renderStyleFG.paintStroke != null)
          iconShape.onDraw(canvas, renderStyleIconHighlighted.renderStyleFG.paintStroke, IconShape.FOREGROUND);
      }
    }
    if (isSelectable() && isSelectState() && renderStyleIconSelected != null) {
      if (renderStyleIconSelected.renderStyleBG != null) {
        if (renderStyleIconSelected.renderStyleBG.paintFill != null)
          iconShape.onDraw(canvas, renderStyleIconSelected.renderStyleBG.paintFill, IconShape.BACKGROUND);
        if (renderStyleIconSelected.renderStyleBG.paintStroke != null)
          iconShape.onDraw(canvas, renderStyleIconSelected.renderStyleBG.paintStroke, IconShape.BACKGROUND);
      }
      if (renderStyleIconSelected.renderStyleMG != null) {
        if (renderStyleIconSelected.renderStyleMG.paintFill != null)
          iconShape.onDraw(canvas, renderStyleIconSelected.renderStyleMG.paintFill, IconShape.MIDDLEGROUND);
        if (renderStyleIconSelected.renderStyleMG.paintStroke != null)
          iconShape.onDraw(canvas, renderStyleIconSelected.renderStyleMG.paintStroke, IconShape.MIDDLEGROUND);
      }
      if (renderStyleIconSelected.renderStyleFG != null) {
        if (renderStyleIconSelected.renderStyleFG.paintFill != null)
          iconShape.onDraw(canvas, renderStyleIconSelected.renderStyleFG.paintFill, IconShape.FOREGROUND);
        if (renderStyleIconSelected.renderStyleFG.paintStroke != null)
          iconShape.onDraw(canvas, renderStyleIconSelected.renderStyleFG.paintStroke, IconShape.FOREGROUND);
      }
    }
  }
  if (isBoundingBoxVisible()) {
    final RectF bBox = getShape().getBBox();
    canvas.drawRect(bBox, paintDebug);
  }
  //
  if (translateCanvas) {
    canvas.restore();
  }
}

@Override
public RenderStyleIcon getStyleIdle() {
  return renderStyleIconIdle;
}

@Override
public void setStyleIdle(RenderStyleIcon style) {
  this.renderStyleIconIdle = style;
  setDirtyStyle(true);
}

@Override
public RenderStyleIcon getStyleSelected() {
  return renderStyleIconSelected;
}

@Override
public void setStyleSelected(RenderStyleIcon style) {
  this.renderStyleIconSelected = style;
  setDirtyStyle(true);
}

@Override
public RenderStyleIcon getStyleHighlighted() {
  return renderStyleIconHighlighted;
}

@Override
public void setStyleHighlighted(RenderStyleIcon style) {
  this.renderStyleIconHighlighted = style;
  setDirtyStyle(true);
}
}

