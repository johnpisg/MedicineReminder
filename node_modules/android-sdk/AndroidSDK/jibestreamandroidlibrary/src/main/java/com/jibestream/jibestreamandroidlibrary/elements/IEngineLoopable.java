package com.jibestream.jibestreamandroidlibrary.elements;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.RectF;

import com.jibestream.jibestreamandroidlibrary.intents.IntentTouch;
import com.jibestream.jibestreamandroidlibrary.main.Camera;
import com.jibestream.jibestreamandroidlibrary.main.M;

import java.util.ArrayList;

/**
 * Interface for Elements that will be added to engines display list.
 * The order of these functions will be called every iteration is:
 * onCreate
 * onUpdate
 * onPreRender
 * onCollision (according to the frequency defined in M.i().COLLISION_UPDATES_FREQ
 * onPreRender
 * onRender
 * <p/>
 * Created by emmanuel on 15-05-11.
 */
public interface IEngineLoopable {
/**
 * Initialization happens here, runs once on every element
 * the first time the engine starts
 *
 * @param context
 * @param timeElapsed
 * @param timeTotal
 * @param camera
 */
void onCreate(Context context, M m, long timeElapsed, long timeTotal, Camera camera);

/**
 * On collision detection enter
 * runs on custom frame rate defined in the model: M.java
 *
 * @param m
 * @param collidesWith The array of elements this object collides with
 * @param fps
 * @param camera
 */
void onCollision(M m, ArrayList<Element> collidesWith, long timeElapsed, long timeTotal, int fps, Camera camera);

/**
 * Transformations updates happen here, runs every frame.
 * Called before onPreRender in order to update Elements
 * transformation values
 *
 * @param m
 * @param timeElapsed
 * @param timeTotal
 * @param fps
 * @param camera
 */
void onUpdate(M m, long timeElapsed, long timeTotal, int fps, Camera camera);

/**
 * Runs before rendering cycle occurs,
 * SDK will call this to update transformation according to the various
 * constrain flags.
 *
 * @param m
 * @param timeElapsed
 * @param timeTotal
 * @param fps
 * @param camera
 */
void onPreRender(M m, long timeElapsed, long timeTotal, int fps, Camera camera);

/**
 * Canvas draw calls placed here, the engine will call this function
 * once a frame for every visible and active element.
 * If user will override this fn call super.onRender() to maintain the existing functionality.
 *
 * @param canvas
 * @param touchPaint Paint for touch hit tests will be null on regular render
 */
void onRender(Canvas canvas, Paint touchPaint);

/**
 * callback when destroy has been called on M instance.
 */
void onDestroy(Context context);

/**
 * Callback for touch events
 * @param intentTouch
 */
void onTouchEvent(IntentTouch intentTouch);

}
