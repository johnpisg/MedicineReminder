package com.jibestream.jibestreamandroidlibrary.shapes;

import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.RectF;

import com.jibestream.jibestreamandroidlibrary.main.IElementProxyDirty;
import com.jibestream.jibestreamandroidlibrary.styles.RenderStyle;

import java.util.ArrayList;

/**
 * Created by emmanuel on 15-07-29.
 */
public class IconShape extends Shape {
private static final String TAG = "IconShape";
public static final String BACKGROUND = "background";
public static final String MIDDLEGROUND = "middleground";
public static final String FOREGROUND = "foreground";
public static final String CUSTOM = "custom";
public static final String TOUCH = "touch";
private final ArrayList<IShape> shapes;
private final ArrayList<String> types;
private final ArrayList<RenderStyle> renderStyles;
public float width;
public float height;


public IconShape() {
  shapes = new ArrayList<>();
  types = new ArrayList<>();
  renderStyles = new ArrayList<>();
}

@Override
public void onDraw(Canvas canvas, Paint paint) {
  new IllegalArgumentException("You can`t assign a IconShape to an ElementMap ");
}

public synchronized void onDraw(Canvas canvas, Paint paint, String type) {
  if (shapes == null) return;
  final int length = shapes.size();
  for (int i = 0; i < length; i++) {
    final IShape iShape = shapes.get(i);
    if (iShape == null) continue;
    final float iShapeOffsetX = iShape.getOffsetX();
    final float iShapeOffsetY = iShape.getOffsetY();
    final boolean translateCanvas = iShapeOffsetX != 0 || iShapeOffsetY != 0;
    if (translateCanvas) {
      canvas.save();
      canvas.translate(iShapeOffsetX, iShapeOffsetY);
    }
    if (types.get(i) == type || type == TOUCH) {
      iShape.onDraw(canvas, paint);
    } else {
      final RenderStyle renderStyle = renderStyles.get(i);
      if (renderStyle != null) {
        if (renderStyle.paintFill != null) {
          iShape.onDraw(canvas, renderStyle.paintFill);
        }
        if (renderStyle.paintStroke != null) {
          iShape.onDraw(canvas, renderStyle.paintStroke);
        }
      }
    }
    if (translateCanvas) {
      canvas.restore();
    }
  }
}

private synchronized void calc() {
  final RectF bbox = new RectF();
  final int size = shapes.size();
  for (int i = 0; i < size; i++) {
    IShape iShape = shapes.get(i);
    final RectF iShapeBBox = iShape.getBBox();
    bbox.union(iShapeBBox);
    iShape.setElementProxyDirty(getElementProxyDirty());
  }
  setBBox(bbox);
}

public synchronized void addShape(IShape shape, String type, RenderStyle renderStyle) {
  shapes.add(shape);
  types.add(type);
  renderStyles.add(renderStyle);
  calc();
}
}
