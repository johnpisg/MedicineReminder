package com.jibestream.jibestreamandroidlibrary.gestureListeners;

import android.view.MotionEvent;

/**
 * Rotation calculation
 */
public class RotationGestureDetector {
private static final int INVALID_POINTER_ID = -1;
private float fX, fY, sX, sY;
private int pointerId1, pointerId2;
private float currAngle;
private float prevAngle;
private float outAngle;

private OnRotationGestureListener mListener;

public RotationGestureDetector(OnRotationGestureListener listener) {
  mListener = listener;
  pointerId1 = INVALID_POINTER_ID;
  pointerId2 = INVALID_POINTER_ID;
}

public float getAngle() {
  return outAngle;
}
public float getAngleRaw() {
  return currAngle;
}

public boolean onTouchEvent(MotionEvent event) {
  boolean result = false;
  try {
    switch (event.getActionMasked()) {
      case MotionEvent.ACTION_DOWN:
        pointerId1 = event.getPointerId(event.getActionIndex());
        break;
      case MotionEvent.ACTION_POINTER_DOWN:
        pointerId2 = event.getPointerId(event.getActionIndex());
        if (pointerId1 > event.getPointerCount() - 1) break;
        sX = event.getX(event.findPointerIndex(pointerId1));
        sY = event.getY(event.findPointerIndex(pointerId1));
        fX = event.getX(event.findPointerIndex(pointerId2));
        fY = event.getY(event.findPointerIndex(pointerId2));
        break;
      case MotionEvent.ACTION_MOVE:
        if (pointerId1 != INVALID_POINTER_ID && pointerId2 != INVALID_POINTER_ID) {
          float nfX, nfY, nsX, nsY;
          nsX = event.getX(event.findPointerIndex(pointerId1));
          nsY = event.getY(event.findPointerIndex(pointerId1));
          nfX = event.getX(event.findPointerIndex(pointerId2));
          nfY = event.getY(event.findPointerIndex(pointerId2));

          currAngle = angleBetweenLines(fX, fY, sX, sY, nfX, nfY, nsX, nsY);
          outAngle = prevAngle - currAngle;
          prevAngle = currAngle;
          if (mListener != null) {
            result = mListener.onRotation(this,
                (nfX+nsX)*0.5f,
                (nfY+nsY)*0.5f
            );
          }
        }
        break;
      case MotionEvent.ACTION_UP:
        prevAngle = 0;
        pointerId1 = INVALID_POINTER_ID;
        break;
      case MotionEvent.ACTION_POINTER_UP:
        prevAngle = 0;
        pointerId2 = INVALID_POINTER_ID;
        break;
      case MotionEvent.ACTION_CANCEL:
        prevAngle = 0;
        pointerId1 = INVALID_POINTER_ID;
        pointerId2 = INVALID_POINTER_ID;
        break;
    }

  } catch (IllegalArgumentException e) {
  }
  return result;
}

private float angleBetweenLines(float fX, float fY, float sX, float sY, float nfX, float nfY, float nsX, float nsY) {
  float angle1 = (float) Math.atan2((fY - sY), (fX - sX));
  float angle2 = (float) Math.atan2((nfY - nsY), (nfX - nsX));

  float angle = ((float) Math.toDegrees(angle1 - angle2)) % 360;
  if (angle < -180.f) angle += 360.0f;
  if (angle > 180.f) angle -= 360.0f;
  return angle;
}

public interface OnRotationGestureListener {
  boolean onRotation(RotationGestureDetector rotationDetector, float aroundX, float aroundY);
}
}
