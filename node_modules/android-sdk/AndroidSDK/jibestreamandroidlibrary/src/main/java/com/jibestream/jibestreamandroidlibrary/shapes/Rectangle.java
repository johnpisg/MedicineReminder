package com.jibestream.jibestreamandroidlibrary.shapes;

import android.annotation.TargetApi;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.RectF;
import android.os.Build;

/**
 * Rectangle shape abstraction for easy canvas calls
 * Created by emmanuel on 15-05-13.
 */
public class Rectangle extends Shape {
private float left;
private float top;
private float right;
private float bottom;
private boolean round;
private float rx;
private float ry;

/**
 * Creates a Rectangle of a 4/3 size
 * with the pivot at the center
 */
public Rectangle() {
  this(-2f, -1.5f, 2f, 1.5f);
}

/**
 * Creates a rectangle shape according to the signature values
 *
 * @param left
 * @param top
 * @param right
 * @param bottom
 */
public Rectangle(float left, float top, float right, float bottom) {
  this(left, top, right, bottom, false, 0, 0);
}

/**
 * Creates a rectangle with optional round corners
 *
 * @param left
 * @param top
 * @param right
 * @param bottom
 * @param round
 * @param rx
 * @param ry
 */
public Rectangle(float left, float top, float right, float bottom, boolean round, float rx, float ry) {
  super();
  this.left = left;
  this.top = top;
  this.right = right;
  this.bottom = bottom;
  this.round = round;
  this.rx = rx;
  this.ry = ry;
  calc();
}

private void calc() {
  RectF bbox = new RectF(left, top, right, bottom);
  setBBox(bbox);
}

public void onDraw(Canvas canvas, Paint paint) {
  if (round) {
    canvas.drawRoundRect(left, top, right, bottom, rx, ry, paint);
  } else {
    canvas.drawRect(left, top, right, bottom, paint);
  }
}

@Override
public String toString() {
  return getClass().getName() + " left: " + left + " top: " + top + " right: " + right + " bottom: " + bottom;
}

public synchronized void set(float left, float top, float right, float bottom) {
  this.left = left;
  this.top = top;
  this.right = right;
  this.bottom = bottom;
  calc();
}

public synchronized void set(RectF rectF) {
  this.left = rectF.left;
  this.top = rectF.top;
  this.right = rectF.right;
  this.bottom = rectF.bottom;
  calc();
}

public synchronized float getLeft() {
  return left;
}

public synchronized void setLeft(float left) {
  this.left = left;
  calc();
}

public synchronized float getTop() {
  return top;
}

public synchronized void setTop(float top) {
  this.top = top;
  calc();
}


public synchronized float getBottom() {
  return bottom;
}

public synchronized void setBottom(float bottom) {
  this.bottom = bottom;
  calc();
}

public synchronized float getRight() {
  return right;
}

public synchronized void setRight(float right) {
  this.right = right;
  calc();
}


public synchronized boolean isRound() {
  return round;
}

public synchronized void setRound(boolean round) {
  this.round = round;
}

public synchronized float getRx() {
  return rx;
}

public synchronized void setRx(float rx) {
  this.rx = rx;
}

public synchronized float getRy() {
  return ry;
}

public synchronized void setRy(float ry) {
  this.ry = ry;
}
}