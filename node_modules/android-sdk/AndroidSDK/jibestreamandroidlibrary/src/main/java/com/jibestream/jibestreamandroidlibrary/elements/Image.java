package com.jibestream.jibestreamandroidlibrary.elements;

import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Paint;

import com.jibestream.jibestreamandroidlibrary.styles.RenderStyle;
import com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.Waypoint;
import com.jibestream.jibestreamandroidlibrary.shapes.Circle;
import com.jibestream.jibestreamandroidlibrary.utils.ColorsMaterialDesign;

/**
 * Created by emmanuel on 15-07-05.
 */
public class Image extends ElementMap {
public com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects.Amenity amenityComponent;
public Waypoint waypoint;
private float size = 10f;
private com.jibestream.jibestreamandroidlibrary.shapes.Image img = new com.jibestream.jibestreamandroidlibrary.shapes.Image();
private Circle hit = new Circle();
private Circle sel = new Circle();
private Circle hgh = new Circle();

public Image() {
  super();
  setShape(img);
  setSelectable(true);
  setHighlightable(true);

  styleIdle = new RenderStyle(Paint.Style.FILL);
  styleIdle.paintFill.setAntiAlias(true);
  styleIdle.paintFill.setFilterBitmap(true);

  styleSelected = new RenderStyle(Paint.Style.FILL);
  styleSelected.paintFill.setAntiAlias(true);
  styleSelected.paintFill.setColor(ColorsMaterialDesign.RED3);
  setHeadsUp(true);
//  setConstantScale(true);
  calc();
}

private void calc() {
  img.setWidth((int) (size * 2f));
  img.setHeight((int) (size * 2f));
  hit.setRadius(size * 1.5f);
  sel.setRadius(size * 1.3f);
  hgh.setRadius(size * 1.5f);
}

@Override
public synchronized void onRender(Canvas canvas, Paint touchPaint) {

  canvas.save();
  canvas.concat(getTransform().getGlobalMatrix());
  canvas.translate(getOffsetX(), getOffsetY());

  if (touchPaint != null) {
    hit.onDraw( canvas, touchPaint);
  } else {
    if (isHighlightable() && isHighlightState() && styleHighlighted != null) {
      if (styleHighlighted.paintFill != null) {
        hgh.onDraw(canvas, styleHighlighted.paintFill);
      }
      if (styleHighlighted.paintStroke != null) {
        hgh.onDraw(canvas, styleHighlighted.paintStroke);
      }
    }
    if (isSelectable() && isSelectState() && styleSelected != null) {
      if (styleSelected.paintFill != null) {
        sel.onDraw(canvas, styleSelected.paintFill);
      }
      if (styleSelected.paintStroke != null) {
        sel.onDraw(canvas, styleSelected.paintStroke);
      }
    }
    if (styleIdle != null) {
      if (styleIdle.paintFill != null) {
        img.onDraw(canvas, styleIdle.paintFill);
      }
      if (styleIdle.paintStroke != null) {
        img.onDraw(canvas, styleIdle.paintStroke);
      }
    }
  }
  if (isBoundingBoxVisible()) {
    canvas.drawRect(getShape().getBBox(), paintDebug);
  }
  canvas.restore();
}


public void setBitmap(Bitmap bitmap) {
  img.setBitmap(bitmap);
}

public float getSize() {
  return size;
}

public void setSize(float size) {
  this.size = size;
  calc();
}

}
