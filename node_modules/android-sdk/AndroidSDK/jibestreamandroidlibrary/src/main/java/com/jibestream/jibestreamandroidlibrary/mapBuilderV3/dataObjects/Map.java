package com.jibestream.jibestreamandroidlibrary.mapBuilderV3.dataObjects;

import android.os.Parcel;
import android.os.Parcelable;

/**
 * Map information holder
 */
public class Map implements Parcelable {

/**
 * Internal ID of a map
 */
public int mapId;
// A Map has to be assigned to a location
/**
 * Assigned location of a map
 */
public int locationId;
// The 'building' location ID (the parent in the hierarchy)
/**
 * The parent (parent location) of a map
 */
public int parentLocationId;
/**
 * Location name of a map
 */
public String locationName;
/**
 * Description of a map
 */
public String description;
/**
 * Name of a map
 */
public String name;
/**
 * The URI of a map
 */
public String uri;
/**
 * Thumbnail html of a map
 */
public String thumbnailHTML;
/**
 * Floor sequence/order/number of a map
 */
public int floorSequence;
/**
 * Hign contrast image of a map
 */
public String highContrastMap;
/**
 * Themed image of a map
 */
public String themedMap;
/**
 * Is this a default map?",dataType="boolean
 */
public boolean defaultMapForDevice;
/**
 * SVG image of a map
 */
public String svgMap;
/**
 * JPath traversal preference of a map
 */
public int preference;
/**
 * Field used for custom use (file/image holder)
 */
public String customFile1;
/**
 * Field used for custom use (file/image holder)
 */
public String customFile2;
/**
 * Field used for custom use (file/image holder)
 */
public String customFile3;
/**
 * Field used for translating the scale and position from other maps
 */
public double xOffset;
/**
 * Field used for translating the scale and position from other maps
 */
public double yOffset;
/**
 * Field used for translating the scale and position from other maps
 */
public double xScale;
/**
 * Field used for translating the scale and position from other maps
 */
public double yScale;
/**
 * Field used for latitude 1
  */
public double lat1;
/**
 * Field used for latitude 2
 */
public double lng1;
/**
 * Field used for longitude 1
 */
public double lat2;
/**
 * Field used for longitude 2
 */
public double lng2;

@Override
public String toString() {
  return "Map [mapId=" + mapId + ", locationId=" + locationId
      + ", parentLocationId=" + parentLocationId + ", locationName="
      + locationName + ", description=" + description + ", name="
      + name + ", uri=" + uri + ", thumbnailHTML=" + thumbnailHTML
      + ", floorSequence=" + floorSequence + ", highContrastMap="
      + highContrastMap + ", themedMap=" + themedMap
      + ", defaultMapForDevice=" + defaultMapForDevice + ", svgMap="
      + svgMap + ", preference=" + preference + ", customFile1="
      + customFile1 + ", customFile2=" + customFile2
      + ", customFile3=" + customFile3 + ", xOffset=" + xOffset
      + ", yOffset=" + yOffset + ", xScale=" + xScale + ", yScale="
      + yScale + ", lat1=" + lat1 + ", lng1=" + lng1 + ", lat2=" + lat2 + ", lng2=" + lng2 + "]";
}


@Override
public int describeContents() {
  return 0;
}

@Override
public void writeToParcel(Parcel dest, int flags) {
  dest.writeInt(this.mapId);
  dest.writeInt(this.locationId);
  dest.writeInt(this.parentLocationId);
  dest.writeString(this.locationName);
  dest.writeString(this.description);
  dest.writeString(this.name);
  dest.writeString(this.uri);
  dest.writeString(this.thumbnailHTML);
  dest.writeInt(this.floorSequence);
  dest.writeString(this.highContrastMap);
  dest.writeString(this.themedMap);
  dest.writeByte(defaultMapForDevice ? (byte) 1 : (byte) 0);
  dest.writeString(this.svgMap);
  dest.writeInt(this.preference);
  dest.writeString(this.customFile1);
  dest.writeString(this.customFile2);
  dest.writeString(this.customFile3);
  dest.writeDouble(this.xOffset);
  dest.writeDouble(this.yOffset);
  dest.writeDouble(this.xScale);
  dest.writeDouble(this.yScale);
  dest.writeDouble(this.lat1);
  dest.writeDouble(this.lng1);
  dest.writeDouble(this.lat2);
  dest.writeDouble(this.lng2);
}

public Map() {
}

protected Map(Parcel in) {
  this.mapId = in.readInt();
  this.locationId = in.readInt();
  this.parentLocationId = in.readInt();
  this.locationName = in.readString();
  this.description = in.readString();
  this.name = in.readString();
  this.uri = in.readString();
  this.thumbnailHTML = in.readString();
  this.floorSequence = in.readInt();
  this.highContrastMap = in.readString();
  this.themedMap = in.readString();
  this.defaultMapForDevice = in.readByte() != 0;
  this.svgMap = in.readString();
  this.preference = in.readInt();
  this.customFile1 = in.readString();
  this.customFile2 = in.readString();
  this.customFile3 = in.readString();
  this.xOffset = in.readDouble();
  this.yOffset = in.readDouble();
  this.xScale = in.readDouble();
  this.yScale = in.readDouble();
  this.lat1 = in.readDouble();
  this.lng1 = in.readDouble();
  this.lat2 = in.readDouble();
  this.lng2 = in.readDouble();
}

public static final Parcelable.Creator<Map> CREATOR = new Parcelable.Creator<Map>() {
  public Map createFromParcel(Parcel source) {
    return new Map(source);
  }

  public Map[] newArray(int size) {
    return new Map[size];
  }
};
}
