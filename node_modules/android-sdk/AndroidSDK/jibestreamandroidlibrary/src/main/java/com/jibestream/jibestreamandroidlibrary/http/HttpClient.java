package com.jibestream.jibestreamandroidlibrary.http;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

public class HttpClient {
private static final String TAG = "HttpClient";

public static void downloadUrl(final String stringURL, final DownloadCallbacks downloadCallbacks, final BasicAuthentication basicAuthentication) {
  new Thread(
      new Runnable() {
        @Override
        public void run() {
          InputStream inputStream = null;
          HttpURLConnection httpURLConnection = null;
          try {
            URL url = new URL(stringURL);
            httpURLConnection = (HttpURLConnection) url.openConnection();
            httpURLConnection.setReadTimeout(3000);
            httpURLConnection.setConnectTimeout(30000);
            httpURLConnection.setRequestMethod("GET");
            httpURLConnection.setDoInput(true);
            if (basicAuthentication != null) {
              httpURLConnection.addRequestProperty(BasicAuthentication.USER_KEY, basicAuthentication.userValue);
              httpURLConnection.addRequestProperty(BasicAuthentication.PASSCODE_KEY, basicAuthentication.passcodeValue);
              httpURLConnection.addRequestProperty(BasicAuthentication.API_KEY, basicAuthentication.apiValue);
              httpURLConnection.addRequestProperty(BasicAuthentication.LANGUAGE_CODE_KEY, basicAuthentication.languageCodeValue);
            }

            httpURLConnection.connect();
            int responseCode = httpURLConnection.getResponseCode();
//            Log.d(TAG, "The responseCode is: " + responseCode);
            if (responseCode == HttpURLConnection.HTTP_OK) {
              inputStream = httpURLConnection.getInputStream();
              final String response = streamToString(inputStream);
              downloadCallbacks.onSuccess(response);
            } else {
              downloadCallbacks.onError(responseCode);
            }
          } catch (IOException e) {
            e.printStackTrace();
            downloadCallbacks.onError(0);
          } finally {
            if (inputStream != null) {
              try {
                inputStream.close();
              } catch (IOException e) {
                e.printStackTrace();
              }
            }
            if (httpURLConnection != null) {
              httpURLConnection.disconnect();
            }
          }
        }
      }
  ).start();

}

static String streamToString(InputStream stream) throws IOException {
  if (stream == null) return "";
  StringBuilder stringBuilder = new StringBuilder();
  BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(stream, "UTF-8"));
  String line = bufferedReader.readLine();
  while (line != null) {
    stringBuilder.append(line);
    stringBuilder.append('\n');
    line = bufferedReader.readLine();
  }
//  Log.d(TAG, stringBuilder.toString());
  return stringBuilder.toString();
}

public interface DownloadCallbacks {
  void onSuccess(String response);

  void onError(int responseCode);
}
}